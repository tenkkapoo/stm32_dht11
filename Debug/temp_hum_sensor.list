
temp_hum_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036c0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08003890  08003890  00004890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039d4  080039d4  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080039d4  080039d4  000049d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039dc  080039dc  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039dc  080039dc  000049dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080039e0  080039e0  000049e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080039e4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  2000005c  08003a40  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08003a40  00005258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c652  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ae2  00000000  00000000  000116de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  000131c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000998  00000000  00000000  00013df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021d29  00000000  00000000  00014790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e642  00000000  00000000  000364b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0d6e  00000000  00000000  00044afb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00115869  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038d0  00000000  00000000  001158ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0011917c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003878 	.word	0x08003878

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08003878 	.word	0x08003878

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <start>:
	char delay_ms2[50];
	snprintf(delay_ms2, sizeof(delay_ms2), "delay = %lu\n", __HAL_TIM_GET_COUNTER(&htim2));
	HAL_UART_Transmit(&huart2, (uint8_t*)delay_ms2, strlen(delay_ms2), HAL_MAX_DELAY);
}

void start (void) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	@ 0x50
 80005f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	4b2e      	ldr	r3, [pc, #184]	@ (80006c0 <start+0xd4>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	4a2d      	ldr	r2, [pc, #180]	@ (80006c0 <start+0xd4>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6313      	str	r3, [r2, #48]	@ 0x30
 8000612:	4b2b      	ldr	r3, [pc, #172]	@ (80006c0 <start+0xd4>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000624:	4827      	ldr	r0, [pc, #156]	@ (80006c4 <start+0xd8>)
 8000626:	f000 ffa9 	bl	800157c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800062a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800062e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000630:	2301      	movs	r3, #1
 8000632:	643b      	str	r3, [r7, #64]	@ 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	647b      	str	r3, [r7, #68]	@ 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000638:	2300      	movs	r3, #0
 800063a:	64bb      	str	r3, [r7, #72]	@ 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000640:	4619      	mov	r1, r3
 8000642:	4820      	ldr	r0, [pc, #128]	@ (80006c4 <start+0xd8>)
 8000644:	f000 fdee 	bl	8001224 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000648:	2200      	movs	r2, #0
 800064a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800064e:	481d      	ldr	r0, [pc, #116]	@ (80006c4 <start+0xd8>)
 8000650:	f000 ff94 	bl	800157c <HAL_GPIO_WritePin>
  HAL_Delay(25);
 8000654:	2019      	movs	r0, #25
 8000656:	f000 fcdb 	bl	8001010 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 800065a:	2201      	movs	r2, #1
 800065c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000660:	4818      	ldr	r0, [pc, #96]	@ (80006c4 <start+0xd8>)
 8000662:	f000 ff8b 	bl	800157c <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8000666:	2028      	movs	r0, #40	@ 0x28
 8000668:	f000 fcd2 	bl	8001010 <HAL_Delay>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800066c:	2300      	movs	r3, #0
 800066e:	643b      	str	r3, [r7, #64]	@ 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000670:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000674:	4619      	mov	r1, r3
 8000676:	4813      	ldr	r0, [pc, #76]	@ (80006c4 <start+0xd8>)
 8000678:	f000 fdd4 	bl	8001224 <HAL_GPIO_Init>
  while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 1) {
 800067c:	bf00      	nop
 800067e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000682:	4810      	ldr	r0, [pc, #64]	@ (80006c4 <start+0xd8>)
 8000684:	f000 ff62 	bl	800154c <HAL_GPIO_ReadPin>
 8000688:	4603      	mov	r3, r0
 800068a:	2b01      	cmp	r3, #1
 800068c:	d0f7      	beq.n	800067e <start+0x92>

  }

  char start_message[50];
  snprintf(start_message, sizeof(start_message), "Start function complete\n");
 800068e:	f107 0308 	add.w	r3, r7, #8
 8000692:	4a0d      	ldr	r2, [pc, #52]	@ (80006c8 <start+0xdc>)
 8000694:	2132      	movs	r1, #50	@ 0x32
 8000696:	4618      	mov	r0, r3
 8000698:	f002 fc3a 	bl	8002f10 <sniprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)start_message, strlen(start_message), HAL_MAX_DELAY);
 800069c:	f107 0308 	add.w	r3, r7, #8
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff fdb5 	bl	8000210 <strlen>
 80006a6:	4603      	mov	r3, r0
 80006a8:	b29a      	uxth	r2, r3
 80006aa:	f107 0108 	add.w	r1, r7, #8
 80006ae:	f04f 33ff 	mov.w	r3, #4294967295
 80006b2:	4806      	ldr	r0, [pc, #24]	@ (80006cc <start+0xe0>)
 80006b4:	f002 f870 	bl	8002798 <HAL_UART_Transmit>

}
 80006b8:	bf00      	nop
 80006ba:	3750      	adds	r7, #80	@ 0x50
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40020000 	.word	0x40020000
 80006c8:	080038a0 	.word	0x080038a0
 80006cc:	200000c0 	.word	0x200000c0

080006d0 <check_dht>:

int check_dht (void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b09a      	sub	sp, #104	@ 0x68
 80006d4:	af00      	add	r7, sp, #0

	__HAL_TIM_SET_COUNTER(&htim2, 0);
 80006d6:	4b2b      	ldr	r3, [pc, #172]	@ (8000784 <check_dht+0xb4>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2200      	movs	r2, #0
 80006dc:	625a      	str	r2, [r3, #36]	@ 0x24
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 0) {
 80006de:	e006      	b.n	80006ee <check_dht+0x1e>
		if (__HAL_TIM_GET_COUNTER(&htim2) > 85) {
 80006e0:	4b28      	ldr	r3, [pc, #160]	@ (8000784 <check_dht+0xb4>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006e6:	2b55      	cmp	r3, #85	@ 0x55
 80006e8:	d901      	bls.n	80006ee <check_dht+0x1e>
						return 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	e045      	b.n	800077a <check_dht+0xaa>
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 0) {
 80006ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006f2:	4825      	ldr	r0, [pc, #148]	@ (8000788 <check_dht+0xb8>)
 80006f4:	f000 ff2a 	bl	800154c <HAL_GPIO_ReadPin>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d0f0      	beq.n	80006e0 <check_dht+0x10>
		}

	}
	char delay_ms[50];
	snprintf(delay_ms, sizeof(delay_ms), "low signal for = %lu\n", __HAL_TIM_GET_COUNTER(&htim2));
 80006fe:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <check_dht+0xb4>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000704:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8000708:	4a20      	ldr	r2, [pc, #128]	@ (800078c <check_dht+0xbc>)
 800070a:	2132      	movs	r1, #50	@ 0x32
 800070c:	f002 fc00 	bl	8002f10 <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)delay_ms, strlen(delay_ms), HAL_MAX_DELAY);
 8000710:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff fd7b 	bl	8000210 <strlen>
 800071a:	4603      	mov	r3, r0
 800071c:	b29a      	uxth	r2, r3
 800071e:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8000722:	f04f 33ff 	mov.w	r3, #4294967295
 8000726:	481a      	ldr	r0, [pc, #104]	@ (8000790 <check_dht+0xc0>)
 8000728:	f002 f836 	bl	8002798 <HAL_UART_Transmit>
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <check_dht+0xb4>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2200      	movs	r2, #0
 8000732:	625a      	str	r2, [r3, #36]	@ 0x24
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 1) {
 8000734:	e006      	b.n	8000744 <check_dht+0x74>
		if (__HAL_TIM_GET_COUNTER(&htim2) > 85) {
 8000736:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <check_dht+0xb4>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073c:	2b55      	cmp	r3, #85	@ 0x55
 800073e:	d901      	bls.n	8000744 <check_dht+0x74>
						return 2;
 8000740:	2302      	movs	r3, #2
 8000742:	e01a      	b.n	800077a <check_dht+0xaa>
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 1) {
 8000744:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000748:	480f      	ldr	r0, [pc, #60]	@ (8000788 <check_dht+0xb8>)
 800074a:	f000 feff 	bl	800154c <HAL_GPIO_ReadPin>
 800074e:	4603      	mov	r3, r0
 8000750:	2b01      	cmp	r3, #1
 8000752:	d0f0      	beq.n	8000736 <check_dht+0x66>
		}
	}


	char check_message[50];
    snprintf(check_message, sizeof(check_message), "DHT11 check complete\n");
 8000754:	463b      	mov	r3, r7
 8000756:	4a0f      	ldr	r2, [pc, #60]	@ (8000794 <check_dht+0xc4>)
 8000758:	2132      	movs	r1, #50	@ 0x32
 800075a:	4618      	mov	r0, r3
 800075c:	f002 fbd8 	bl	8002f10 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)check_message, strlen(check_message), HAL_MAX_DELAY);
 8000760:	463b      	mov	r3, r7
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fd54 	bl	8000210 <strlen>
 8000768:	4603      	mov	r3, r0
 800076a:	b29a      	uxth	r2, r3
 800076c:	4639      	mov	r1, r7
 800076e:	f04f 33ff 	mov.w	r3, #4294967295
 8000772:	4807      	ldr	r0, [pc, #28]	@ (8000790 <check_dht+0xc0>)
 8000774:	f002 f810 	bl	8002798 <HAL_UART_Transmit>
	return 1;
 8000778:	2301      	movs	r3, #1
}
 800077a:	4618      	mov	r0, r3
 800077c:	3768      	adds	r7, #104	@ 0x68
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000078 	.word	0x20000078
 8000788:	40020000 	.word	0x40020000
 800078c:	080038bc 	.word	0x080038bc
 8000790:	200000c0 	.word	0x200000c0
 8000794:	080038d4 	.word	0x080038d4

08000798 <read_dht>:

uint8_t read_dht (void) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
	uint8_t data_byte = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	71fb      	strb	r3, [r7, #7]

	for (int i = 0; i < 8; i++) { /* Read 8 bits */
 80007a2:	2300      	movs	r3, #0
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	e040      	b.n	800082a <read_dht+0x92>
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 80007a8:	4b24      	ldr	r3, [pc, #144]	@ (800083c <read_dht+0xa4>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2200      	movs	r2, #0
 80007ae:	625a      	str	r2, [r3, #36]	@ 0x24
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 0) { //start transmit 50us
 80007b0:	e004      	b.n	80007bc <read_dht+0x24>
			if (__HAL_TIM_GET_COUNTER(&htim2) > 75) {
 80007b2:	4b22      	ldr	r3, [pc, #136]	@ (800083c <read_dht+0xa4>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007b8:	2b4b      	cmp	r3, #75	@ 0x4b
 80007ba:	d808      	bhi.n	80007ce <read_dht+0x36>
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 0) { //start transmit 50us
 80007bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007c0:	481f      	ldr	r0, [pc, #124]	@ (8000840 <read_dht+0xa8>)
 80007c2:	f000 fec3 	bl	800154c <HAL_GPIO_ReadPin>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d0f2      	beq.n	80007b2 <read_dht+0x1a>
 80007cc:	e000      	b.n	80007d0 <read_dht+0x38>
				break;
 80007ce:	bf00      	nop
			}
		}

		__HAL_TIM_SET_COUNTER(&htim2, 0);
 80007d0:	4b1a      	ldr	r3, [pc, #104]	@ (800083c <read_dht+0xa4>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2200      	movs	r2, #0
 80007d6:	625a      	str	r2, [r3, #36]	@ 0x24
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 1) { //bit value
 80007d8:	e004      	b.n	80007e4 <read_dht+0x4c>
			if (__HAL_TIM_GET_COUNTER(&htim2) > 75) {
 80007da:	4b18      	ldr	r3, [pc, #96]	@ (800083c <read_dht+0xa4>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007e0:	2b4b      	cmp	r3, #75	@ 0x4b
 80007e2:	d808      	bhi.n	80007f6 <read_dht+0x5e>
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 1) { //bit value
 80007e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007e8:	4815      	ldr	r0, [pc, #84]	@ (8000840 <read_dht+0xa8>)
 80007ea:	f000 feaf 	bl	800154c <HAL_GPIO_ReadPin>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d0f2      	beq.n	80007da <read_dht+0x42>
 80007f4:	e000      	b.n	80007f8 <read_dht+0x60>
				break;
 80007f6:	bf00      	nop
			}
		}

		if ((__HAL_TIM_GET_COUNTER(&htim2) > 65) && (__HAL_TIM_GET_COUNTER(&htim2) < 75)) {
 80007f8:	4b10      	ldr	r3, [pc, #64]	@ (800083c <read_dht+0xa4>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007fe:	2b41      	cmp	r3, #65	@ 0x41
 8000800:	d910      	bls.n	8000824 <read_dht+0x8c>
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <read_dht+0xa4>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000808:	2b4a      	cmp	r3, #74	@ 0x4a
 800080a:	d80b      	bhi.n	8000824 <read_dht+0x8c>
			data_byte = data_byte | (1 << (7 - i)); // set bit if 1
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	f1c3 0307 	rsb	r3, r3, #7
 8000812:	2201      	movs	r2, #1
 8000814:	fa02 f303 	lsl.w	r3, r2, r3
 8000818:	b25a      	sxtb	r2, r3
 800081a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081e:	4313      	orrs	r3, r2
 8000820:	b25b      	sxtb	r3, r3
 8000822:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 8; i++) { /* Read 8 bits */
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	3301      	adds	r3, #1
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	2b07      	cmp	r3, #7
 800082e:	ddbb      	ble.n	80007a8 <read_dht+0x10>


	}


	return data_byte;
 8000830:	79fb      	ldrb	r3, [r7, #7]
}
 8000832:	4618      	mov	r0, r3
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000078 	.word	0x20000078
 8000840:	40020000 	.word	0x40020000

08000844 <dht_data>:

void dht_data (void) {
 8000844:	b5b0      	push	{r4, r5, r7, lr}
 8000846:	b0b0      	sub	sp, #192	@ 0xc0
 8000848:	af02      	add	r7, sp, #8
	char dht_msg[50];
	snprintf(dht_msg, sizeof(dht_msg), "Starting data reading \n");
 800084a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800084e:	4a4a      	ldr	r2, [pc, #296]	@ (8000978 <dht_data+0x134>)
 8000850:	2132      	movs	r1, #50	@ 0x32
 8000852:	4618      	mov	r0, r3
 8000854:	f002 fb5c 	bl	8002f10 <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)dht_msg, strlen(dht_msg), HAL_MAX_DELAY);
 8000858:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fcd7 	bl	8000210 <strlen>
 8000862:	4603      	mov	r3, r0
 8000864:	b29a      	uxth	r2, r3
 8000866:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 800086a:	f04f 33ff 	mov.w	r3, #4294967295
 800086e:	4843      	ldr	r0, [pc, #268]	@ (800097c <dht_data+0x138>)
 8000870:	f001 ff92 	bl	8002798 <HAL_UART_Transmit>
	uint8_t humid_int = read_dht();
 8000874:	f7ff ff90 	bl	8000798 <read_dht>
 8000878:	4603      	mov	r3, r0
 800087a:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
	uint8_t humid_dec = read_dht();
 800087e:	f7ff ff8b 	bl	8000798 <read_dht>
 8000882:	4603      	mov	r3, r0
 8000884:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
	uint8_t temp_int = read_dht();
 8000888:	f7ff ff86 	bl	8000798 <read_dht>
 800088c:	4603      	mov	r3, r0
 800088e:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5
	uint8_t temp_dec = read_dht();
 8000892:	f7ff ff81 	bl	8000798 <read_dht>
 8000896:	4603      	mov	r3, r0
 8000898:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
	uint8_t check_sum = read_dht();
 800089c:	f7ff ff7c 	bl	8000798 <read_dht>
 80008a0:	4603      	mov	r3, r0
 80008a2:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
	char humid_msg[50];
	char temp_msg[50];

	if (check_sum == ((humid_int + humid_dec + temp_int + temp_dec) & (0xff))) {
 80008a6:	f897 20b3 	ldrb.w	r2, [r7, #179]	@ 0xb3
 80008aa:	f897 10b7 	ldrb.w	r1, [r7, #183]	@ 0xb7
 80008ae:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 80008b2:	4419      	add	r1, r3
 80008b4:	f897 30b5 	ldrb.w	r3, [r7, #181]	@ 0xb5
 80008b8:	4419      	add	r1, r3
 80008ba:	f897 30b4 	ldrb.w	r3, [r7, #180]	@ 0xb4
 80008be:	440b      	add	r3, r1
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d13e      	bne.n	8000944 <dht_data+0x100>
		// Works
		snprintf(humid_msg, sizeof(humid_msg), "Humidity = %d.%d \n", humid_int, humid_dec/10);
 80008c6:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 80008ca:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 80008ce:	492c      	ldr	r1, [pc, #176]	@ (8000980 <dht_data+0x13c>)
 80008d0:	fba1 1303 	umull	r1, r3, r1, r3
 80008d4:	08db      	lsrs	r3, r3, #3
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 80008dc:	9300      	str	r3, [sp, #0]
 80008de:	4613      	mov	r3, r2
 80008e0:	4a28      	ldr	r2, [pc, #160]	@ (8000984 <dht_data+0x140>)
 80008e2:	2132      	movs	r1, #50	@ 0x32
 80008e4:	f002 fb14 	bl	8002f10 <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)humid_msg, strlen(humid_msg), HAL_MAX_DELAY);
 80008e8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fc8f 	bl	8000210 <strlen>
 80008f2:	4603      	mov	r3, r0
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80008fa:	f04f 33ff 	mov.w	r3, #4294967295
 80008fe:	481f      	ldr	r0, [pc, #124]	@ (800097c <dht_data+0x138>)
 8000900:	f001 ff4a 	bl	8002798 <HAL_UART_Transmit>

		snprintf(temp_msg, sizeof(temp_msg), "Temperature = %d.%d \n", temp_int, temp_dec/10);
 8000904:	f897 20b5 	ldrb.w	r2, [r7, #181]	@ 0xb5
 8000908:	f897 30b4 	ldrb.w	r3, [r7, #180]	@ 0xb4
 800090c:	491c      	ldr	r1, [pc, #112]	@ (8000980 <dht_data+0x13c>)
 800090e:	fba1 1303 	umull	r1, r3, r1, r3
 8000912:	08db      	lsrs	r3, r3, #3
 8000914:	b2db      	uxtb	r3, r3
 8000916:	f107 0018 	add.w	r0, r7, #24
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	4613      	mov	r3, r2
 800091e:	4a1a      	ldr	r2, [pc, #104]	@ (8000988 <dht_data+0x144>)
 8000920:	2132      	movs	r1, #50	@ 0x32
 8000922:	f002 faf5 	bl	8002f10 <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)temp_msg, strlen(temp_msg), HAL_MAX_DELAY);
 8000926:	f107 0318 	add.w	r3, r7, #24
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff fc70 	bl	8000210 <strlen>
 8000930:	4603      	mov	r3, r0
 8000932:	b29a      	uxth	r2, r3
 8000934:	f107 0118 	add.w	r1, r7, #24
 8000938:	f04f 33ff 	mov.w	r3, #4294967295
 800093c:	480f      	ldr	r0, [pc, #60]	@ (800097c <dht_data+0x138>)
 800093e:	f001 ff2b 	bl	8002798 <HAL_UART_Transmit>
		//Doesnt work
		char message_err[] = "Check sum is wrong \n";
		HAL_UART_Transmit(&huart2, (uint8_t*)message_err, strlen(message_err), HAL_MAX_DELAY);

	}
}
 8000942:	e015      	b.n	8000970 <dht_data+0x12c>
		char message_err[] = "Check sum is wrong \n";
 8000944:	4b11      	ldr	r3, [pc, #68]	@ (800098c <dht_data+0x148>)
 8000946:	463c      	mov	r4, r7
 8000948:	461d      	mov	r5, r3
 800094a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800094c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800094e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000952:	6020      	str	r0, [r4, #0]
 8000954:	3404      	adds	r4, #4
 8000956:	7021      	strb	r1, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)message_err, strlen(message_err), HAL_MAX_DELAY);
 8000958:	463b      	mov	r3, r7
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff fc58 	bl	8000210 <strlen>
 8000960:	4603      	mov	r3, r0
 8000962:	b29a      	uxth	r2, r3
 8000964:	4639      	mov	r1, r7
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	4804      	ldr	r0, [pc, #16]	@ (800097c <dht_data+0x138>)
 800096c:	f001 ff14 	bl	8002798 <HAL_UART_Transmit>
}
 8000970:	bf00      	nop
 8000972:	37b8      	adds	r7, #184	@ 0xb8
 8000974:	46bd      	mov	sp, r7
 8000976:	bdb0      	pop	{r4, r5, r7, pc}
 8000978:	080038ec 	.word	0x080038ec
 800097c:	200000c0 	.word	0x200000c0
 8000980:	cccccccd 	.word	0xcccccccd
 8000984:	08003904 	.word	0x08003904
 8000988:	08003918 	.word	0x08003918
 800098c:	08003930 	.word	0x08003930

08000990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b0a5      	sub	sp, #148	@ 0x94
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000996:	f000 fac9 	bl	8000f2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800099a:	f000 f885 	bl	8000aa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099e:	f000 f959 	bl	8000c54 <MX_GPIO_Init>
  MX_TIM2_Init();
 80009a2:	f000 f8e1 	bl	8000b68 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80009a6:	f000 f92b 	bl	8000c00 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // change prescaler to 15 after generating code
  HAL_Delay(1000);
 80009aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009ae:	f000 fb2f 	bl	8001010 <HAL_Delay>
  char message_start[50];
  snprintf(message_start, sizeof(message_start), "New run\n");
 80009b2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80009b6:	4a36      	ldr	r2, [pc, #216]	@ (8000a90 <main+0x100>)
 80009b8:	2132      	movs	r1, #50	@ 0x32
 80009ba:	4618      	mov	r0, r3
 80009bc:	f002 faa8 	bl	8002f10 <sniprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)message_start, strlen(message_start), HAL_MAX_DELAY);
 80009c0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fc23 	bl	8000210 <strlen>
 80009ca:	4603      	mov	r3, r0
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80009d2:	f04f 33ff 	mov.w	r3, #4294967295
 80009d6:	482f      	ldr	r0, [pc, #188]	@ (8000a94 <main+0x104>)
 80009d8:	f001 fede 	bl	8002798 <HAL_UART_Transmit>
  HAL_TIM_Base_Start(&htim2);
 80009dc:	482e      	ldr	r0, [pc, #184]	@ (8000a98 <main+0x108>)
 80009de:	f001 fb99 	bl	8002114 <HAL_TIM_Base_Start>
  char message[50];
  snprintf(message, sizeof(message), "Initialzation done\n");
 80009e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e6:	4a2d      	ldr	r2, [pc, #180]	@ (8000a9c <main+0x10c>)
 80009e8:	2132      	movs	r1, #50	@ 0x32
 80009ea:	4618      	mov	r0, r3
 80009ec:	f002 fa90 	bl	8002f10 <sniprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 80009f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fc0b 	bl	8000210 <strlen>
 80009fa:	4603      	mov	r3, r0
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295
 8000a06:	4823      	ldr	r0, [pc, #140]	@ (8000a94 <main+0x104>)
 8000a08:	f001 fec6 	bl	8002798 <HAL_UART_Transmit>
  HAL_Delay(2000);
 8000a0c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a10:	f000 fafe 	bl	8001010 <HAL_Delay>

  start();
 8000a14:	f7ff fdea 	bl	80005ec <start>

  int check = check_dht();
 8000a18:	f7ff fe5a 	bl	80006d0 <check_dht>
 8000a1c:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
  if (check == 1) {
 8000a20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d102      	bne.n	8000a2e <main+0x9e>
	  dht_data();
 8000a28:	f7ff ff0c 	bl	8000844 <dht_data>
 8000a2c:	e02d      	b.n	8000a8a <main+0xfa>
  }
  else if (check == 0) {
 8000a2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d114      	bne.n	8000a60 <main+0xd0>
	  char message_err2[] = "80us low fails\n";
 8000a36:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa0 <main+0x110>)
 8000a38:	f107 0414 	add.w	r4, r7, #20
 8000a3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  HAL_UART_Transmit(&huart2, (uint8_t*)message_err2, strlen(message_err2), HAL_MAX_DELAY);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fbe2 	bl	8000210 <strlen>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	f107 0114 	add.w	r1, r7, #20
 8000a54:	f04f 33ff 	mov.w	r3, #4294967295
 8000a58:	480e      	ldr	r0, [pc, #56]	@ (8000a94 <main+0x104>)
 8000a5a:	f001 fe9d 	bl	8002798 <HAL_UART_Transmit>
 8000a5e:	e014      	b.n	8000a8a <main+0xfa>
  }
  else {
	  char message_err3[] = "80us up fails\n";
 8000a60:	4b10      	ldr	r3, [pc, #64]	@ (8000aa4 <main+0x114>)
 8000a62:	1d3c      	adds	r4, r7, #4
 8000a64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a66:	c407      	stmia	r4!, {r0, r1, r2}
 8000a68:	8023      	strh	r3, [r4, #0]
 8000a6a:	3402      	adds	r4, #2
 8000a6c:	0c1b      	lsrs	r3, r3, #16
 8000a6e:	7023      	strb	r3, [r4, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)message_err3, strlen(message_err3), HAL_MAX_DELAY);
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff fbcc 	bl	8000210 <strlen>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	1d39      	adds	r1, r7, #4
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a82:	4804      	ldr	r0, [pc, #16]	@ (8000a94 <main+0x104>)
 8000a84:	f001 fe88 	bl	8002798 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	bf00      	nop
 8000a8c:	e7fd      	b.n	8000a8a <main+0xfa>
 8000a8e:	bf00      	nop
 8000a90:	08003948 	.word	0x08003948
 8000a94:	200000c0 	.word	0x200000c0
 8000a98:	20000078 	.word	0x20000078
 8000a9c:	08003954 	.word	0x08003954
 8000aa0:	08003968 	.word	0x08003968
 8000aa4:	08003978 	.word	0x08003978

08000aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b094      	sub	sp, #80	@ 0x50
 8000aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	2234      	movs	r2, #52	@ 0x34
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f002 fa60 	bl	8002f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000abc:	f107 0308 	add.w	r3, r7, #8
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000acc:	2300      	movs	r3, #0
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	4b23      	ldr	r3, [pc, #140]	@ (8000b60 <SystemClock_Config+0xb8>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad4:	4a22      	ldr	r2, [pc, #136]	@ (8000b60 <SystemClock_Config+0xb8>)
 8000ad6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ada:	6413      	str	r3, [r2, #64]	@ 0x40
 8000adc:	4b20      	ldr	r3, [pc, #128]	@ (8000b60 <SystemClock_Config+0xb8>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ae8:	2300      	movs	r3, #0
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	4b1d      	ldr	r3, [pc, #116]	@ (8000b64 <SystemClock_Config+0xbc>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000af4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b64 <SystemClock_Config+0xbc>)
 8000af6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000afa:	6013      	str	r3, [r2, #0]
 8000afc:	4b19      	ldr	r3, [pc, #100]	@ (8000b64 <SystemClock_Config+0xbc>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b04:	603b      	str	r3, [r7, #0]
 8000b06:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b10:	2310      	movs	r3, #16
 8000b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f001 f80b 	bl	8001b38 <HAL_RCC_OscConfig>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000b28:	f000 f8c8 	bl	8000cbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b2c:	230f      	movs	r3, #15
 8000b2e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b40:	f107 0308 	add.w	r3, r7, #8
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 fd32 	bl	80015b0 <HAL_RCC_ClockConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b52:	f000 f8b3 	bl	8000cbc <Error_Handler>
  }
}
 8000b56:	bf00      	nop
 8000b58:	3750      	adds	r7, #80	@ 0x50
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40007000 	.word	0x40007000

08000b68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b6e:	f107 0308 	add.w	r3, r7, #8
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b84:	4b1d      	ldr	r3, [pc, #116]	@ (8000bfc <MX_TIM2_Init+0x94>)
 8000b86:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8000b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bfc <MX_TIM2_Init+0x94>)
 8000b8e:	220f      	movs	r2, #15
 8000b90:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b92:	4b1a      	ldr	r3, [pc, #104]	@ (8000bfc <MX_TIM2_Init+0x94>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000b98:	4b18      	ldr	r3, [pc, #96]	@ (8000bfc <MX_TIM2_Init+0x94>)
 8000b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba0:	4b16      	ldr	r3, [pc, #88]	@ (8000bfc <MX_TIM2_Init+0x94>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba6:	4b15      	ldr	r3, [pc, #84]	@ (8000bfc <MX_TIM2_Init+0x94>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bac:	4813      	ldr	r0, [pc, #76]	@ (8000bfc <MX_TIM2_Init+0x94>)
 8000bae:	f001 fa61 	bl	8002074 <HAL_TIM_Base_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000bb8:	f000 f880 	bl	8000cbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bc2:	f107 0308 	add.w	r3, r7, #8
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	480c      	ldr	r0, [pc, #48]	@ (8000bfc <MX_TIM2_Init+0x94>)
 8000bca:	f001 fb0b 	bl	80021e4 <HAL_TIM_ConfigClockSource>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000bd4:	f000 f872 	bl	8000cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000be0:	463b      	mov	r3, r7
 8000be2:	4619      	mov	r1, r3
 8000be4:	4805      	ldr	r0, [pc, #20]	@ (8000bfc <MX_TIM2_Init+0x94>)
 8000be6:	f001 fd0b 	bl	8002600 <HAL_TIMEx_MasterConfigSynchronization>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000bf0:	f000 f864 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000078 	.word	0x20000078

08000c00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c04:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	@ (8000c50 <MX_USART2_UART_Init+0x50>)
 8000c08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	@ (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	@ (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c24:	4b09      	ldr	r3, [pc, #36]	@ (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c26:	220c      	movs	r2, #12
 8000c28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	@ (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c30:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c36:	4805      	ldr	r0, [pc, #20]	@ (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c38:	f001 fd5e 	bl	80026f8 <HAL_UART_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c42:	f000 f83b 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	200000c0 	.word	0x200000c0
 8000c50:	40004400 	.word	0x40004400

08000c54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	4b11      	ldr	r3, [pc, #68]	@ (8000cb4 <MX_GPIO_Init+0x60>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c70:	4a10      	ldr	r2, [pc, #64]	@ (8000cb4 <MX_GPIO_Init+0x60>)
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c78:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb4 <MX_GPIO_Init+0x60>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	603b      	str	r3, [r7, #0]
 8000c82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c8a:	480b      	ldr	r0, [pc, #44]	@ (8000cb8 <MX_GPIO_Init+0x64>)
 8000c8c:	f000 fc76 	bl	800157c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c96:	2301      	movs	r3, #1
 8000c98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4804      	ldr	r0, [pc, #16]	@ (8000cb8 <MX_GPIO_Init+0x64>)
 8000ca8:	f000 fabc 	bl	8001224 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000cac:	bf00      	nop
 8000cae:	3718      	adds	r7, #24
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020000 	.word	0x40020000

08000cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc0:	b672      	cpsid	i
}
 8000cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <Error_Handler+0x8>

08000cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	4b10      	ldr	r3, [pc, #64]	@ (8000d14 <HAL_MspInit+0x4c>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd6:	4a0f      	ldr	r2, [pc, #60]	@ (8000d14 <HAL_MspInit+0x4c>)
 8000cd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cde:	4b0d      	ldr	r3, [pc, #52]	@ (8000d14 <HAL_MspInit+0x4c>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	603b      	str	r3, [r7, #0]
 8000cee:	4b09      	ldr	r3, [pc, #36]	@ (8000d14 <HAL_MspInit+0x4c>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf2:	4a08      	ldr	r2, [pc, #32]	@ (8000d14 <HAL_MspInit+0x4c>)
 8000cf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cfa:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <HAL_MspInit+0x4c>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	40023800 	.word	0x40023800

08000d18 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d28:	d10d      	bne.n	8000d46 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	4b09      	ldr	r3, [pc, #36]	@ (8000d54 <HAL_TIM_Base_MspInit+0x3c>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d32:	4a08      	ldr	r2, [pc, #32]	@ (8000d54 <HAL_TIM_Base_MspInit+0x3c>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d3a:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <HAL_TIM_Base_MspInit+0x3c>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000d46:	bf00      	nop
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800

08000d58 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	@ 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a19      	ldr	r2, [pc, #100]	@ (8000ddc <HAL_UART_MspInit+0x84>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d12b      	bne.n	8000dd2 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	4b18      	ldr	r3, [pc, #96]	@ (8000de0 <HAL_UART_MspInit+0x88>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d82:	4a17      	ldr	r2, [pc, #92]	@ (8000de0 <HAL_UART_MspInit+0x88>)
 8000d84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d8a:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <HAL_UART_MspInit+0x88>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	4b11      	ldr	r3, [pc, #68]	@ (8000de0 <HAL_UART_MspInit+0x88>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	4a10      	ldr	r2, [pc, #64]	@ (8000de0 <HAL_UART_MspInit+0x88>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da6:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <HAL_UART_MspInit+0x88>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000db2:	230c      	movs	r3, #12
 8000db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dc2:	2307      	movs	r3, #7
 8000dc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4805      	ldr	r0, [pc, #20]	@ (8000de4 <HAL_UART_MspInit+0x8c>)
 8000dce:	f000 fa29 	bl	8001224 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000dd2:	bf00      	nop
 8000dd4:	3728      	adds	r7, #40	@ 0x28
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40004400 	.word	0x40004400
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020000 	.word	0x40020000

08000de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dec:	bf00      	nop
 8000dee:	e7fd      	b.n	8000dec <NMI_Handler+0x4>

08000df0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <HardFault_Handler+0x4>

08000df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <MemManage_Handler+0x4>

08000e00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <BusFault_Handler+0x4>

08000e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <UsageFault_Handler+0x4>

08000e10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3e:	f000 f8c7 	bl	8000fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e50:	4a14      	ldr	r2, [pc, #80]	@ (8000ea4 <_sbrk+0x5c>)
 8000e52:	4b15      	ldr	r3, [pc, #84]	@ (8000ea8 <_sbrk+0x60>)
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e5c:	4b13      	ldr	r3, [pc, #76]	@ (8000eac <_sbrk+0x64>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d102      	bne.n	8000e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e64:	4b11      	ldr	r3, [pc, #68]	@ (8000eac <_sbrk+0x64>)
 8000e66:	4a12      	ldr	r2, [pc, #72]	@ (8000eb0 <_sbrk+0x68>)
 8000e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e6a:	4b10      	ldr	r3, [pc, #64]	@ (8000eac <_sbrk+0x64>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d207      	bcs.n	8000e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e78:	f002 f888 	bl	8002f8c <__errno>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	220c      	movs	r2, #12
 8000e80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e82:	f04f 33ff 	mov.w	r3, #4294967295
 8000e86:	e009      	b.n	8000e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e88:	4b08      	ldr	r3, [pc, #32]	@ (8000eac <_sbrk+0x64>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e8e:	4b07      	ldr	r3, [pc, #28]	@ (8000eac <_sbrk+0x64>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	4a05      	ldr	r2, [pc, #20]	@ (8000eac <_sbrk+0x64>)
 8000e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3718      	adds	r7, #24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20020000 	.word	0x20020000
 8000ea8:	00000400 	.word	0x00000400
 8000eac:	20000108 	.word	0x20000108
 8000eb0:	20000258 	.word	0x20000258

08000eb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb8:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <SystemInit+0x20>)
 8000eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ebe:	4a05      	ldr	r2, [pc, #20]	@ (8000ed4 <SystemInit+0x20>)
 8000ec0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ec4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ed8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f10 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000edc:	f7ff ffea 	bl	8000eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ee0:	480c      	ldr	r0, [pc, #48]	@ (8000f14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ee2:	490d      	ldr	r1, [pc, #52]	@ (8000f18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	@ (8000f1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee8:	e002      	b.n	8000ef0 <LoopCopyDataInit>

08000eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eee:	3304      	adds	r3, #4

08000ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef4:	d3f9      	bcc.n	8000eea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ef8:	4c0a      	ldr	r4, [pc, #40]	@ (8000f24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000efc:	e001      	b.n	8000f02 <LoopFillZerobss>

08000efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f00:	3204      	adds	r2, #4

08000f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f04:	d3fb      	bcc.n	8000efe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f06:	f002 f847 	bl	8002f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f0a:	f7ff fd41 	bl	8000990 <main>
  bx  lr    
 8000f0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f18:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f1c:	080039e4 	.word	0x080039e4
  ldr r2, =_sbss
 8000f20:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f24:	20000258 	.word	0x20000258

08000f28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f28:	e7fe      	b.n	8000f28 <ADC_IRQHandler>
	...

08000f2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f30:	4b0e      	ldr	r3, [pc, #56]	@ (8000f6c <HAL_Init+0x40>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0d      	ldr	r2, [pc, #52]	@ (8000f6c <HAL_Init+0x40>)
 8000f36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f6c <HAL_Init+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0a      	ldr	r2, [pc, #40]	@ (8000f6c <HAL_Init+0x40>)
 8000f42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f48:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a07      	ldr	r2, [pc, #28]	@ (8000f6c <HAL_Init+0x40>)
 8000f4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f54:	2003      	movs	r0, #3
 8000f56:	f000 f931 	bl	80011bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5a:	200f      	movs	r0, #15
 8000f5c:	f000 f808 	bl	8000f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f60:	f7ff feb2 	bl	8000cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40023c00 	.word	0x40023c00

08000f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f78:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <HAL_InitTick+0x54>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b12      	ldr	r3, [pc, #72]	@ (8000fc8 <HAL_InitTick+0x58>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f93b 	bl	800120a <HAL_SYSTICK_Config>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00e      	b.n	8000fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	d80a      	bhi.n	8000fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f000 f911 	bl	80011d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb0:	4a06      	ldr	r2, [pc, #24]	@ (8000fcc <HAL_InitTick+0x5c>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e000      	b.n	8000fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	20000008 	.word	0x20000008
 8000fcc:	20000004 	.word	0x20000004

08000fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <HAL_IncTick+0x20>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <HAL_IncTick+0x24>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a04      	ldr	r2, [pc, #16]	@ (8000ff4 <HAL_IncTick+0x24>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	2000010c 	.word	0x2000010c

08000ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	@ (800100c <HAL_GetTick+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	2000010c 	.word	0x2000010c

08001010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001018:	f7ff ffee 	bl	8000ff8 <HAL_GetTick>
 800101c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001028:	d005      	beq.n	8001036 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800102a:	4b0a      	ldr	r3, [pc, #40]	@ (8001054 <HAL_Delay+0x44>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	461a      	mov	r2, r3
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4413      	add	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001036:	bf00      	nop
 8001038:	f7ff ffde 	bl	8000ff8 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	429a      	cmp	r2, r3
 8001046:	d8f7      	bhi.n	8001038 <HAL_Delay+0x28>
  {
  }
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000008 	.word	0x20000008

08001058 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001068:	4b0c      	ldr	r3, [pc, #48]	@ (800109c <__NVIC_SetPriorityGrouping+0x44>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001074:	4013      	ands	r3, r2
 8001076:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001080:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001084:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001088:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800108a:	4a04      	ldr	r2, [pc, #16]	@ (800109c <__NVIC_SetPriorityGrouping+0x44>)
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	60d3      	str	r3, [r2, #12]
}
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a4:	4b04      	ldr	r3, [pc, #16]	@ (80010b8 <__NVIC_GetPriorityGrouping+0x18>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	f003 0307 	and.w	r3, r3, #7
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	6039      	str	r1, [r7, #0]
 80010c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	db0a      	blt.n	80010e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	490c      	ldr	r1, [pc, #48]	@ (8001108 <__NVIC_SetPriority+0x4c>)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	0112      	lsls	r2, r2, #4
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	440b      	add	r3, r1
 80010e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e4:	e00a      	b.n	80010fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4908      	ldr	r1, [pc, #32]	@ (800110c <__NVIC_SetPriority+0x50>)
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	3b04      	subs	r3, #4
 80010f4:	0112      	lsls	r2, r2, #4
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	440b      	add	r3, r1
 80010fa:	761a      	strb	r2, [r3, #24]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000e100 	.word	0xe000e100
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001110:	b480      	push	{r7}
 8001112:	b089      	sub	sp, #36	@ 0x24
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f1c3 0307 	rsb	r3, r3, #7
 800112a:	2b04      	cmp	r3, #4
 800112c:	bf28      	it	cs
 800112e:	2304      	movcs	r3, #4
 8001130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3304      	adds	r3, #4
 8001136:	2b06      	cmp	r3, #6
 8001138:	d902      	bls.n	8001140 <NVIC_EncodePriority+0x30>
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3b03      	subs	r3, #3
 800113e:	e000      	b.n	8001142 <NVIC_EncodePriority+0x32>
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	f04f 32ff 	mov.w	r2, #4294967295
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43da      	mvns	r2, r3
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	401a      	ands	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001158:	f04f 31ff 	mov.w	r1, #4294967295
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	fa01 f303 	lsl.w	r3, r1, r3
 8001162:	43d9      	mvns	r1, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	4313      	orrs	r3, r2
         );
}
 800116a:	4618      	mov	r0, r3
 800116c:	3724      	adds	r7, #36	@ 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001188:	d301      	bcc.n	800118e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800118a:	2301      	movs	r3, #1
 800118c:	e00f      	b.n	80011ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118e:	4a0a      	ldr	r2, [pc, #40]	@ (80011b8 <SysTick_Config+0x40>)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001196:	210f      	movs	r1, #15
 8001198:	f04f 30ff 	mov.w	r0, #4294967295
 800119c:	f7ff ff8e 	bl	80010bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a0:	4b05      	ldr	r3, [pc, #20]	@ (80011b8 <SysTick_Config+0x40>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a6:	4b04      	ldr	r3, [pc, #16]	@ (80011b8 <SysTick_Config+0x40>)
 80011a8:	2207      	movs	r2, #7
 80011aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	e000e010 	.word	0xe000e010

080011bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff ff47 	bl	8001058 <__NVIC_SetPriorityGrouping>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b086      	sub	sp, #24
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	4603      	mov	r3, r0
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	607a      	str	r2, [r7, #4]
 80011de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011e4:	f7ff ff5c 	bl	80010a0 <__NVIC_GetPriorityGrouping>
 80011e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	6978      	ldr	r0, [r7, #20]
 80011f0:	f7ff ff8e 	bl	8001110 <NVIC_EncodePriority>
 80011f4:	4602      	mov	r2, r0
 80011f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff5d 	bl	80010bc <__NVIC_SetPriority>
}
 8001202:	bf00      	nop
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff ffb0 	bl	8001178 <SysTick_Config>
 8001218:	4603      	mov	r3, r0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001224:	b480      	push	{r7}
 8001226:	b089      	sub	sp, #36	@ 0x24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001236:	2300      	movs	r3, #0
 8001238:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
 800123e:	e165      	b.n	800150c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001240:	2201      	movs	r2, #1
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	4013      	ands	r3, r2
 8001252:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	429a      	cmp	r2, r3
 800125a:	f040 8154 	bne.w	8001506 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	2b01      	cmp	r3, #1
 8001268:	d005      	beq.n	8001276 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001272:	2b02      	cmp	r3, #2
 8001274:	d130      	bne.n	80012d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	2203      	movs	r2, #3
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	68da      	ldr	r2, [r3, #12]
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012ac:	2201      	movs	r2, #1
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	091b      	lsrs	r3, r3, #4
 80012c2:	f003 0201 	and.w	r2, r3, #1
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	2b03      	cmp	r3, #3
 80012e2:	d017      	beq.n	8001314 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	2203      	movs	r2, #3
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d123      	bne.n	8001368 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	08da      	lsrs	r2, r3, #3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3208      	adds	r2, #8
 8001328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800132c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	f003 0307 	and.w	r3, r3, #7
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	220f      	movs	r2, #15
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	691a      	ldr	r2, [r3, #16]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	08da      	lsrs	r2, r3, #3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	3208      	adds	r2, #8
 8001362:	69b9      	ldr	r1, [r7, #24]
 8001364:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	2203      	movs	r2, #3
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 0203 	and.w	r2, r3, #3
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f000 80ae 	beq.w	8001506 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001524 <HAL_GPIO_Init+0x300>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b2:	4a5c      	ldr	r2, [pc, #368]	@ (8001524 <HAL_GPIO_Init+0x300>)
 80013b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ba:	4b5a      	ldr	r3, [pc, #360]	@ (8001524 <HAL_GPIO_Init+0x300>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013c6:	4a58      	ldr	r2, [pc, #352]	@ (8001528 <HAL_GPIO_Init+0x304>)
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	089b      	lsrs	r3, r3, #2
 80013cc:	3302      	adds	r3, #2
 80013ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	220f      	movs	r2, #15
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a4f      	ldr	r2, [pc, #316]	@ (800152c <HAL_GPIO_Init+0x308>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d025      	beq.n	800143e <HAL_GPIO_Init+0x21a>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a4e      	ldr	r2, [pc, #312]	@ (8001530 <HAL_GPIO_Init+0x30c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d01f      	beq.n	800143a <HAL_GPIO_Init+0x216>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a4d      	ldr	r2, [pc, #308]	@ (8001534 <HAL_GPIO_Init+0x310>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d019      	beq.n	8001436 <HAL_GPIO_Init+0x212>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a4c      	ldr	r2, [pc, #304]	@ (8001538 <HAL_GPIO_Init+0x314>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d013      	beq.n	8001432 <HAL_GPIO_Init+0x20e>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a4b      	ldr	r2, [pc, #300]	@ (800153c <HAL_GPIO_Init+0x318>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d00d      	beq.n	800142e <HAL_GPIO_Init+0x20a>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a4a      	ldr	r2, [pc, #296]	@ (8001540 <HAL_GPIO_Init+0x31c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d007      	beq.n	800142a <HAL_GPIO_Init+0x206>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a49      	ldr	r2, [pc, #292]	@ (8001544 <HAL_GPIO_Init+0x320>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d101      	bne.n	8001426 <HAL_GPIO_Init+0x202>
 8001422:	2306      	movs	r3, #6
 8001424:	e00c      	b.n	8001440 <HAL_GPIO_Init+0x21c>
 8001426:	2307      	movs	r3, #7
 8001428:	e00a      	b.n	8001440 <HAL_GPIO_Init+0x21c>
 800142a:	2305      	movs	r3, #5
 800142c:	e008      	b.n	8001440 <HAL_GPIO_Init+0x21c>
 800142e:	2304      	movs	r3, #4
 8001430:	e006      	b.n	8001440 <HAL_GPIO_Init+0x21c>
 8001432:	2303      	movs	r3, #3
 8001434:	e004      	b.n	8001440 <HAL_GPIO_Init+0x21c>
 8001436:	2302      	movs	r3, #2
 8001438:	e002      	b.n	8001440 <HAL_GPIO_Init+0x21c>
 800143a:	2301      	movs	r3, #1
 800143c:	e000      	b.n	8001440 <HAL_GPIO_Init+0x21c>
 800143e:	2300      	movs	r3, #0
 8001440:	69fa      	ldr	r2, [r7, #28]
 8001442:	f002 0203 	and.w	r2, r2, #3
 8001446:	0092      	lsls	r2, r2, #2
 8001448:	4093      	lsls	r3, r2
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001450:	4935      	ldr	r1, [pc, #212]	@ (8001528 <HAL_GPIO_Init+0x304>)
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	089b      	lsrs	r3, r3, #2
 8001456:	3302      	adds	r3, #2
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800145e:	4b3a      	ldr	r3, [pc, #232]	@ (8001548 <HAL_GPIO_Init+0x324>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001482:	4a31      	ldr	r2, [pc, #196]	@ (8001548 <HAL_GPIO_Init+0x324>)
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001488:	4b2f      	ldr	r3, [pc, #188]	@ (8001548 <HAL_GPIO_Init+0x324>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	43db      	mvns	r3, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014ac:	4a26      	ldr	r2, [pc, #152]	@ (8001548 <HAL_GPIO_Init+0x324>)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014b2:	4b25      	ldr	r3, [pc, #148]	@ (8001548 <HAL_GPIO_Init+0x324>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4013      	ands	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001548 <HAL_GPIO_Init+0x324>)
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001548 <HAL_GPIO_Init+0x324>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001500:	4a11      	ldr	r2, [pc, #68]	@ (8001548 <HAL_GPIO_Init+0x324>)
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3301      	adds	r3, #1
 800150a:	61fb      	str	r3, [r7, #28]
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	2b0f      	cmp	r3, #15
 8001510:	f67f ae96 	bls.w	8001240 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	3724      	adds	r7, #36	@ 0x24
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800
 8001528:	40013800 	.word	0x40013800
 800152c:	40020000 	.word	0x40020000
 8001530:	40020400 	.word	0x40020400
 8001534:	40020800 	.word	0x40020800
 8001538:	40020c00 	.word	0x40020c00
 800153c:	40021000 	.word	0x40021000
 8001540:	40021400 	.word	0x40021400
 8001544:	40021800 	.word	0x40021800
 8001548:	40013c00 	.word	0x40013c00

0800154c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691a      	ldr	r2, [r3, #16]
 800155c:	887b      	ldrh	r3, [r7, #2]
 800155e:	4013      	ands	r3, r2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d002      	beq.n	800156a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001564:	2301      	movs	r3, #1
 8001566:	73fb      	strb	r3, [r7, #15]
 8001568:	e001      	b.n	800156e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800156a:	2300      	movs	r3, #0
 800156c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800156e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	807b      	strh	r3, [r7, #2]
 8001588:	4613      	mov	r3, r2
 800158a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800158c:	787b      	ldrb	r3, [r7, #1]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001592:	887a      	ldrh	r2, [r7, #2]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001598:	e003      	b.n	80015a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800159a:	887b      	ldrh	r3, [r7, #2]
 800159c:	041a      	lsls	r2, r3, #16
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	619a      	str	r2, [r3, #24]
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
	...

080015b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d101      	bne.n	80015c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e0cc      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015c4:	4b68      	ldr	r3, [pc, #416]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 030f 	and.w	r3, r3, #15
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d90c      	bls.n	80015ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d2:	4b65      	ldr	r3, [pc, #404]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015da:	4b63      	ldr	r3, [pc, #396]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d001      	beq.n	80015ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0b8      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d020      	beq.n	800163a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001604:	4b59      	ldr	r3, [pc, #356]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	4a58      	ldr	r2, [pc, #352]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800160e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800161c:	4b53      	ldr	r3, [pc, #332]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	4a52      	ldr	r2, [pc, #328]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001626:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001628:	4b50      	ldr	r3, [pc, #320]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	494d      	ldr	r1, [pc, #308]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	4313      	orrs	r3, r2
 8001638:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d044      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d107      	bne.n	800165e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164e:	4b47      	ldr	r3, [pc, #284]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d119      	bne.n	800168e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e07f      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b02      	cmp	r3, #2
 8001664:	d003      	beq.n	800166e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800166a:	2b03      	cmp	r3, #3
 800166c:	d107      	bne.n	800167e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166e:	4b3f      	ldr	r3, [pc, #252]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d109      	bne.n	800168e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e06f      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167e:	4b3b      	ldr	r3, [pc, #236]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e067      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800168e:	4b37      	ldr	r3, [pc, #220]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f023 0203 	bic.w	r2, r3, #3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	4934      	ldr	r1, [pc, #208]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800169c:	4313      	orrs	r3, r2
 800169e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016a0:	f7ff fcaa 	bl	8000ff8 <HAL_GetTick>
 80016a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a6:	e00a      	b.n	80016be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a8:	f7ff fca6 	bl	8000ff8 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e04f      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016be:	4b2b      	ldr	r3, [pc, #172]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 020c 	and.w	r2, r3, #12
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d1eb      	bne.n	80016a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016d0:	4b25      	ldr	r3, [pc, #148]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 030f 	and.w	r3, r3, #15
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d20c      	bcs.n	80016f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016de:	4b22      	ldr	r3, [pc, #136]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e6:	4b20      	ldr	r3, [pc, #128]	@ (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d001      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e032      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b00      	cmp	r3, #0
 8001702:	d008      	beq.n	8001716 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001704:	4b19      	ldr	r3, [pc, #100]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	4916      	ldr	r1, [pc, #88]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	4313      	orrs	r3, r2
 8001714:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	2b00      	cmp	r3, #0
 8001720:	d009      	beq.n	8001736 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001722:	4b12      	ldr	r3, [pc, #72]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	490e      	ldr	r1, [pc, #56]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	4313      	orrs	r3, r2
 8001734:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001736:	f000 f855 	bl	80017e4 <HAL_RCC_GetSysClockFreq>
 800173a:	4602      	mov	r2, r0
 800173c:	4b0b      	ldr	r3, [pc, #44]	@ (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	091b      	lsrs	r3, r3, #4
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	490a      	ldr	r1, [pc, #40]	@ (8001770 <HAL_RCC_ClockConfig+0x1c0>)
 8001748:	5ccb      	ldrb	r3, [r1, r3]
 800174a:	fa22 f303 	lsr.w	r3, r2, r3
 800174e:	4a09      	ldr	r2, [pc, #36]	@ (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001752:	4b09      	ldr	r3, [pc, #36]	@ (8001778 <HAL_RCC_ClockConfig+0x1c8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fc0a 	bl	8000f70 <HAL_InitTick>

  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40023c00 	.word	0x40023c00
 800176c:	40023800 	.word	0x40023800
 8001770:	08003988 	.word	0x08003988
 8001774:	20000000 	.word	0x20000000
 8001778:	20000004 	.word	0x20000004

0800177c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001780:	4b03      	ldr	r3, [pc, #12]	@ (8001790 <HAL_RCC_GetHCLKFreq+0x14>)
 8001782:	681b      	ldr	r3, [r3, #0]
}
 8001784:	4618      	mov	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	20000000 	.word	0x20000000

08001794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001798:	f7ff fff0 	bl	800177c <HAL_RCC_GetHCLKFreq>
 800179c:	4602      	mov	r2, r0
 800179e:	4b05      	ldr	r3, [pc, #20]	@ (80017b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	0a9b      	lsrs	r3, r3, #10
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	4903      	ldr	r1, [pc, #12]	@ (80017b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017aa:	5ccb      	ldrb	r3, [r1, r3]
 80017ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40023800 	.word	0x40023800
 80017b8:	08003998 	.word	0x08003998

080017bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017c0:	f7ff ffdc 	bl	800177c <HAL_RCC_GetHCLKFreq>
 80017c4:	4602      	mov	r2, r0
 80017c6:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	0b5b      	lsrs	r3, r3, #13
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	4903      	ldr	r1, [pc, #12]	@ (80017e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017d2:	5ccb      	ldrb	r3, [r1, r3]
 80017d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017d8:	4618      	mov	r0, r3
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40023800 	.word	0x40023800
 80017e0:	08003998 	.word	0x08003998

080017e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017e8:	b0a6      	sub	sp, #152	@ 0x98
 80017ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80017fe:	2300      	movs	r3, #0
 8001800:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001804:	2300      	movs	r3, #0
 8001806:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800180a:	4bc8      	ldr	r3, [pc, #800]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x348>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 030c 	and.w	r3, r3, #12
 8001812:	2b0c      	cmp	r3, #12
 8001814:	f200 817e 	bhi.w	8001b14 <HAL_RCC_GetSysClockFreq+0x330>
 8001818:	a201      	add	r2, pc, #4	@ (adr r2, 8001820 <HAL_RCC_GetSysClockFreq+0x3c>)
 800181a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800181e:	bf00      	nop
 8001820:	08001855 	.word	0x08001855
 8001824:	08001b15 	.word	0x08001b15
 8001828:	08001b15 	.word	0x08001b15
 800182c:	08001b15 	.word	0x08001b15
 8001830:	0800185d 	.word	0x0800185d
 8001834:	08001b15 	.word	0x08001b15
 8001838:	08001b15 	.word	0x08001b15
 800183c:	08001b15 	.word	0x08001b15
 8001840:	08001865 	.word	0x08001865
 8001844:	08001b15 	.word	0x08001b15
 8001848:	08001b15 	.word	0x08001b15
 800184c:	08001b15 	.word	0x08001b15
 8001850:	080019cf 	.word	0x080019cf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001854:	4bb6      	ldr	r3, [pc, #728]	@ (8001b30 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001856:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800185a:	e15f      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800185c:	4bb5      	ldr	r3, [pc, #724]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0x350>)
 800185e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001862:	e15b      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001864:	4bb1      	ldr	r3, [pc, #708]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x348>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800186c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001870:	4bae      	ldr	r3, [pc, #696]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x348>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d031      	beq.n	80018e0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800187c:	4bab      	ldr	r3, [pc, #684]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x348>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	099b      	lsrs	r3, r3, #6
 8001882:	2200      	movs	r2, #0
 8001884:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001886:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001888:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800188a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800188e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001890:	2300      	movs	r3, #0
 8001892:	667b      	str	r3, [r7, #100]	@ 0x64
 8001894:	4ba7      	ldr	r3, [pc, #668]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0x350>)
 8001896:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800189a:	462a      	mov	r2, r5
 800189c:	fb03 f202 	mul.w	r2, r3, r2
 80018a0:	2300      	movs	r3, #0
 80018a2:	4621      	mov	r1, r4
 80018a4:	fb01 f303 	mul.w	r3, r1, r3
 80018a8:	4413      	add	r3, r2
 80018aa:	4aa2      	ldr	r2, [pc, #648]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0x350>)
 80018ac:	4621      	mov	r1, r4
 80018ae:	fba1 1202 	umull	r1, r2, r1, r2
 80018b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80018b4:	460a      	mov	r2, r1
 80018b6:	67ba      	str	r2, [r7, #120]	@ 0x78
 80018b8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80018ba:	4413      	add	r3, r2
 80018bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80018be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018c2:	2200      	movs	r2, #0
 80018c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80018c6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80018c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80018cc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80018d0:	f7fe fcf6 	bl	80002c0 <__aeabi_uldivmod>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4613      	mov	r3, r2
 80018da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80018de:	e064      	b.n	80019aa <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e0:	4b92      	ldr	r3, [pc, #584]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x348>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	099b      	lsrs	r3, r3, #6
 80018e6:	2200      	movs	r2, #0
 80018e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80018ea:	657a      	str	r2, [r7, #84]	@ 0x54
 80018ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80018ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80018f4:	2300      	movs	r3, #0
 80018f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018f8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80018fc:	4622      	mov	r2, r4
 80018fe:	462b      	mov	r3, r5
 8001900:	f04f 0000 	mov.w	r0, #0
 8001904:	f04f 0100 	mov.w	r1, #0
 8001908:	0159      	lsls	r1, r3, #5
 800190a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800190e:	0150      	lsls	r0, r2, #5
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4621      	mov	r1, r4
 8001916:	1a51      	subs	r1, r2, r1
 8001918:	6139      	str	r1, [r7, #16]
 800191a:	4629      	mov	r1, r5
 800191c:	eb63 0301 	sbc.w	r3, r3, r1
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	f04f 0300 	mov.w	r3, #0
 800192a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800192e:	4659      	mov	r1, fp
 8001930:	018b      	lsls	r3, r1, #6
 8001932:	4651      	mov	r1, sl
 8001934:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001938:	4651      	mov	r1, sl
 800193a:	018a      	lsls	r2, r1, #6
 800193c:	4651      	mov	r1, sl
 800193e:	ebb2 0801 	subs.w	r8, r2, r1
 8001942:	4659      	mov	r1, fp
 8001944:	eb63 0901 	sbc.w	r9, r3, r1
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	f04f 0300 	mov.w	r3, #0
 8001950:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001954:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001958:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800195c:	4690      	mov	r8, r2
 800195e:	4699      	mov	r9, r3
 8001960:	4623      	mov	r3, r4
 8001962:	eb18 0303 	adds.w	r3, r8, r3
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	462b      	mov	r3, r5
 800196a:	eb49 0303 	adc.w	r3, r9, r3
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	f04f 0300 	mov.w	r3, #0
 8001978:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800197c:	4629      	mov	r1, r5
 800197e:	028b      	lsls	r3, r1, #10
 8001980:	4621      	mov	r1, r4
 8001982:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001986:	4621      	mov	r1, r4
 8001988:	028a      	lsls	r2, r1, #10
 800198a:	4610      	mov	r0, r2
 800198c:	4619      	mov	r1, r3
 800198e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001992:	2200      	movs	r2, #0
 8001994:	643b      	str	r3, [r7, #64]	@ 0x40
 8001996:	647a      	str	r2, [r7, #68]	@ 0x44
 8001998:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800199c:	f7fe fc90 	bl	80002c0 <__aeabi_uldivmod>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4613      	mov	r3, r2
 80019a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80019aa:	4b60      	ldr	r3, [pc, #384]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x348>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	0c1b      	lsrs	r3, r3, #16
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	3301      	adds	r3, #1
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80019bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80019c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80019c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80019cc:	e0a6      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019ce:	4b57      	ldr	r3, [pc, #348]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x348>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019da:	4b54      	ldr	r3, [pc, #336]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x348>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d02a      	beq.n	8001a3c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e6:	4b51      	ldr	r3, [pc, #324]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x348>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	099b      	lsrs	r3, r3, #6
 80019ec:	2200      	movs	r2, #0
 80019ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80019f8:	2100      	movs	r1, #0
 80019fa:	4b4e      	ldr	r3, [pc, #312]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0x350>)
 80019fc:	fb03 f201 	mul.w	r2, r3, r1
 8001a00:	2300      	movs	r3, #0
 8001a02:	fb00 f303 	mul.w	r3, r0, r3
 8001a06:	4413      	add	r3, r2
 8001a08:	4a4a      	ldr	r2, [pc, #296]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0x350>)
 8001a0a:	fba0 1202 	umull	r1, r2, r0, r2
 8001a0e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001a10:	460a      	mov	r2, r1
 8001a12:	673a      	str	r2, [r7, #112]	@ 0x70
 8001a14:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001a16:	4413      	add	r3, r2
 8001a18:	677b      	str	r3, [r7, #116]	@ 0x74
 8001a1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a1e:	2200      	movs	r2, #0
 8001a20:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a22:	637a      	str	r2, [r7, #52]	@ 0x34
 8001a24:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001a28:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001a2c:	f7fe fc48 	bl	80002c0 <__aeabi_uldivmod>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4613      	mov	r3, r2
 8001a36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001a3a:	e05b      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a3c:	4b3b      	ldr	r3, [pc, #236]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x348>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	099b      	lsrs	r3, r3, #6
 8001a42:	2200      	movs	r2, #0
 8001a44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a4e:	623b      	str	r3, [r7, #32]
 8001a50:	2300      	movs	r3, #0
 8001a52:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a58:	4642      	mov	r2, r8
 8001a5a:	464b      	mov	r3, r9
 8001a5c:	f04f 0000 	mov.w	r0, #0
 8001a60:	f04f 0100 	mov.w	r1, #0
 8001a64:	0159      	lsls	r1, r3, #5
 8001a66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a6a:	0150      	lsls	r0, r2, #5
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4641      	mov	r1, r8
 8001a72:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a76:	4649      	mov	r1, r9
 8001a78:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a90:	ebb2 040a 	subs.w	r4, r2, sl
 8001a94:	eb63 050b 	sbc.w	r5, r3, fp
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	f04f 0300 	mov.w	r3, #0
 8001aa0:	00eb      	lsls	r3, r5, #3
 8001aa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001aa6:	00e2      	lsls	r2, r4, #3
 8001aa8:	4614      	mov	r4, r2
 8001aaa:	461d      	mov	r5, r3
 8001aac:	4643      	mov	r3, r8
 8001aae:	18e3      	adds	r3, r4, r3
 8001ab0:	603b      	str	r3, [r7, #0]
 8001ab2:	464b      	mov	r3, r9
 8001ab4:	eb45 0303 	adc.w	r3, r5, r3
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	f04f 0300 	mov.w	r3, #0
 8001ac2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ac6:	4629      	mov	r1, r5
 8001ac8:	028b      	lsls	r3, r1, #10
 8001aca:	4621      	mov	r1, r4
 8001acc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ad0:	4621      	mov	r1, r4
 8001ad2:	028a      	lsls	r2, r1, #10
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001adc:	2200      	movs	r2, #0
 8001ade:	61bb      	str	r3, [r7, #24]
 8001ae0:	61fa      	str	r2, [r7, #28]
 8001ae2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ae6:	f7fe fbeb 	bl	80002c0 <__aeabi_uldivmod>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	4613      	mov	r3, r2
 8001af0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001af4:	4b0d      	ldr	r3, [pc, #52]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0x348>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	0f1b      	lsrs	r3, r3, #28
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001b02:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001b06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001b12:	e003      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b14:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001b16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001b1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3798      	adds	r7, #152	@ 0x98
 8001b24:	46bd      	mov	sp, r7
 8001b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	00f42400 	.word	0x00f42400
 8001b34:	017d7840 	.word	0x017d7840

08001b38 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e28d      	b.n	8002066 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 8083 	beq.w	8001c5e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001b58:	4b94      	ldr	r3, [pc, #592]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 030c 	and.w	r3, r3, #12
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	d019      	beq.n	8001b98 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001b64:	4b91      	ldr	r3, [pc, #580]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 030c 	and.w	r3, r3, #12
        || \
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d106      	bne.n	8001b7e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001b70:	4b8e      	ldr	r3, [pc, #568]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b7c:	d00c      	beq.n	8001b98 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b7e:	4b8b      	ldr	r3, [pc, #556]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001b86:	2b0c      	cmp	r3, #12
 8001b88:	d112      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b8a:	4b88      	ldr	r3, [pc, #544]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b96:	d10b      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b98:	4b84      	ldr	r3, [pc, #528]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d05b      	beq.n	8001c5c <HAL_RCC_OscConfig+0x124>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d157      	bne.n	8001c5c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e25a      	b.n	8002066 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bb8:	d106      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x90>
 8001bba:	4b7c      	ldr	r3, [pc, #496]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a7b      	ldr	r2, [pc, #492]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001bc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	e01d      	b.n	8001c04 <HAL_RCC_OscConfig+0xcc>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bd0:	d10c      	bne.n	8001bec <HAL_RCC_OscConfig+0xb4>
 8001bd2:	4b76      	ldr	r3, [pc, #472]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a75      	ldr	r2, [pc, #468]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001bd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	4b73      	ldr	r3, [pc, #460]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a72      	ldr	r2, [pc, #456]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	e00b      	b.n	8001c04 <HAL_RCC_OscConfig+0xcc>
 8001bec:	4b6f      	ldr	r3, [pc, #444]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a6e      	ldr	r2, [pc, #440]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001bf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	4b6c      	ldr	r3, [pc, #432]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a6b      	ldr	r2, [pc, #428]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001bfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d013      	beq.n	8001c34 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0c:	f7ff f9f4 	bl	8000ff8 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c14:	f7ff f9f0 	bl	8000ff8 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b64      	cmp	r3, #100	@ 0x64
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e21f      	b.n	8002066 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c26:	4b61      	ldr	r3, [pc, #388]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f0      	beq.n	8001c14 <HAL_RCC_OscConfig+0xdc>
 8001c32:	e014      	b.n	8001c5e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c34:	f7ff f9e0 	bl	8000ff8 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c3c:	f7ff f9dc 	bl	8000ff8 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b64      	cmp	r3, #100	@ 0x64
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e20b      	b.n	8002066 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4e:	4b57      	ldr	r3, [pc, #348]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x104>
 8001c5a:	e000      	b.n	8001c5e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d06f      	beq.n	8001d4a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001c6a:	4b50      	ldr	r3, [pc, #320]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 030c 	and.w	r3, r3, #12
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d017      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001c76:	4b4d      	ldr	r3, [pc, #308]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
        || \
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d105      	bne.n	8001c8e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001c82:	4b4a      	ldr	r3, [pc, #296]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00b      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c8e:	4b47      	ldr	r3, [pc, #284]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001c96:	2b0c      	cmp	r3, #12
 8001c98:	d11c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c9a:	4b44      	ldr	r3, [pc, #272]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d116      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca6:	4b41      	ldr	r3, [pc, #260]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d005      	beq.n	8001cbe <HAL_RCC_OscConfig+0x186>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d001      	beq.n	8001cbe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e1d3      	b.n	8002066 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cbe:	4b3b      	ldr	r3, [pc, #236]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	4937      	ldr	r1, [pc, #220]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd2:	e03a      	b.n	8001d4a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d020      	beq.n	8001d1e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cdc:	4b34      	ldr	r3, [pc, #208]	@ (8001db0 <HAL_RCC_OscConfig+0x278>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce2:	f7ff f989 	bl	8000ff8 <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cea:	f7ff f985 	bl	8000ff8 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e1b4      	b.n	8002066 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0f0      	beq.n	8001cea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d08:	4b28      	ldr	r3, [pc, #160]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	4925      	ldr	r1, [pc, #148]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	600b      	str	r3, [r1, #0]
 8001d1c:	e015      	b.n	8001d4a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d1e:	4b24      	ldr	r3, [pc, #144]	@ (8001db0 <HAL_RCC_OscConfig+0x278>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d24:	f7ff f968 	bl	8000ff8 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d2c:	f7ff f964 	bl	8000ff8 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e193      	b.n	8002066 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f0      	bne.n	8001d2c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d036      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d016      	beq.n	8001d8c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d5e:	4b15      	ldr	r3, [pc, #84]	@ (8001db4 <HAL_RCC_OscConfig+0x27c>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d64:	f7ff f948 	bl	8000ff8 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d6c:	f7ff f944 	bl	8000ff8 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e173      	b.n	8002066 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001dac <HAL_RCC_OscConfig+0x274>)
 8001d80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0f0      	beq.n	8001d6c <HAL_RCC_OscConfig+0x234>
 8001d8a:	e01b      	b.n	8001dc4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d8c:	4b09      	ldr	r3, [pc, #36]	@ (8001db4 <HAL_RCC_OscConfig+0x27c>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d92:	f7ff f931 	bl	8000ff8 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d98:	e00e      	b.n	8001db8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d9a:	f7ff f92d 	bl	8000ff8 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d907      	bls.n	8001db8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e15c      	b.n	8002066 <HAL_RCC_OscConfig+0x52e>
 8001dac:	40023800 	.word	0x40023800
 8001db0:	42470000 	.word	0x42470000
 8001db4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db8:	4b8a      	ldr	r3, [pc, #552]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001dba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1ea      	bne.n	8001d9a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 8097 	beq.w	8001f00 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dd6:	4b83      	ldr	r3, [pc, #524]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10f      	bne.n	8001e02 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	4b7f      	ldr	r3, [pc, #508]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dea:	4a7e      	ldr	r2, [pc, #504]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001dec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001df0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001df2:	4b7c      	ldr	r3, [pc, #496]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e02:	4b79      	ldr	r3, [pc, #484]	@ (8001fe8 <HAL_RCC_OscConfig+0x4b0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d118      	bne.n	8001e40 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e0e:	4b76      	ldr	r3, [pc, #472]	@ (8001fe8 <HAL_RCC_OscConfig+0x4b0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a75      	ldr	r2, [pc, #468]	@ (8001fe8 <HAL_RCC_OscConfig+0x4b0>)
 8001e14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e1a:	f7ff f8ed 	bl	8000ff8 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e22:	f7ff f8e9 	bl	8000ff8 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e118      	b.n	8002066 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e34:	4b6c      	ldr	r3, [pc, #432]	@ (8001fe8 <HAL_RCC_OscConfig+0x4b0>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0f0      	beq.n	8001e22 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d106      	bne.n	8001e56 <HAL_RCC_OscConfig+0x31e>
 8001e48:	4b66      	ldr	r3, [pc, #408]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e4c:	4a65      	ldr	r2, [pc, #404]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e54:	e01c      	b.n	8001e90 <HAL_RCC_OscConfig+0x358>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2b05      	cmp	r3, #5
 8001e5c:	d10c      	bne.n	8001e78 <HAL_RCC_OscConfig+0x340>
 8001e5e:	4b61      	ldr	r3, [pc, #388]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e62:	4a60      	ldr	r2, [pc, #384]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001e64:	f043 0304 	orr.w	r3, r3, #4
 8001e68:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e6a:	4b5e      	ldr	r3, [pc, #376]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e6e:	4a5d      	ldr	r2, [pc, #372]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e76:	e00b      	b.n	8001e90 <HAL_RCC_OscConfig+0x358>
 8001e78:	4b5a      	ldr	r3, [pc, #360]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e7c:	4a59      	ldr	r2, [pc, #356]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001e7e:	f023 0301 	bic.w	r3, r3, #1
 8001e82:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e84:	4b57      	ldr	r3, [pc, #348]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e88:	4a56      	ldr	r2, [pc, #344]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001e8a:	f023 0304 	bic.w	r3, r3, #4
 8001e8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d015      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e98:	f7ff f8ae 	bl	8000ff8 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9e:	e00a      	b.n	8001eb6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea0:	f7ff f8aa 	bl	8000ff8 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e0d7      	b.n	8002066 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb6:	4b4b      	ldr	r3, [pc, #300]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0ee      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x368>
 8001ec2:	e014      	b.n	8001eee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec4:	f7ff f898 	bl	8000ff8 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eca:	e00a      	b.n	8001ee2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ecc:	f7ff f894 	bl	8000ff8 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e0c1      	b.n	8002066 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee2:	4b40      	ldr	r3, [pc, #256]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1ee      	bne.n	8001ecc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001eee:	7dfb      	ldrb	r3, [r7, #23]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d105      	bne.n	8001f00 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef4:	4b3b      	ldr	r3, [pc, #236]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef8:	4a3a      	ldr	r2, [pc, #232]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001efa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001efe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f000 80ad 	beq.w	8002064 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f0a:	4b36      	ldr	r3, [pc, #216]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 030c 	and.w	r3, r3, #12
 8001f12:	2b08      	cmp	r3, #8
 8001f14:	d060      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d145      	bne.n	8001faa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1e:	4b33      	ldr	r3, [pc, #204]	@ (8001fec <HAL_RCC_OscConfig+0x4b4>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f24:	f7ff f868 	bl	8000ff8 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2c:	f7ff f864 	bl	8000ff8 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e093      	b.n	8002066 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f3e:	4b29      	ldr	r3, [pc, #164]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69da      	ldr	r2, [r3, #28]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f58:	019b      	lsls	r3, r3, #6
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f60:	085b      	lsrs	r3, r3, #1
 8001f62:	3b01      	subs	r3, #1
 8001f64:	041b      	lsls	r3, r3, #16
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f6c:	061b      	lsls	r3, r3, #24
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f74:	071b      	lsls	r3, r3, #28
 8001f76:	491b      	ldr	r1, [pc, #108]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fec <HAL_RCC_OscConfig+0x4b4>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f82:	f7ff f839 	bl	8000ff8 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8a:	f7ff f835 	bl	8000ff8 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e064      	b.n	8002066 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f9c:	4b11      	ldr	r3, [pc, #68]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0f0      	beq.n	8001f8a <HAL_RCC_OscConfig+0x452>
 8001fa8:	e05c      	b.n	8002064 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001faa:	4b10      	ldr	r3, [pc, #64]	@ (8001fec <HAL_RCC_OscConfig+0x4b4>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb0:	f7ff f822 	bl	8000ff8 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb8:	f7ff f81e 	bl	8000ff8 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e04d      	b.n	8002066 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fca:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <HAL_RCC_OscConfig+0x4ac>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x480>
 8001fd6:	e045      	b.n	8002064 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d107      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e040      	b.n	8002066 <HAL_RCC_OscConfig+0x52e>
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40007000 	.word	0x40007000
 8001fec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ff0:	4b1f      	ldr	r3, [pc, #124]	@ (8002070 <HAL_RCC_OscConfig+0x538>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d030      	beq.n	8002060 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002008:	429a      	cmp	r2, r3
 800200a:	d129      	bne.n	8002060 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002016:	429a      	cmp	r2, r3
 8002018:	d122      	bne.n	8002060 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002020:	4013      	ands	r3, r2
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002026:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002028:	4293      	cmp	r3, r2
 800202a:	d119      	bne.n	8002060 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002036:	085b      	lsrs	r3, r3, #1
 8002038:	3b01      	subs	r3, #1
 800203a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800203c:	429a      	cmp	r2, r3
 800203e:	d10f      	bne.n	8002060 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800204a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800204c:	429a      	cmp	r2, r3
 800204e:	d107      	bne.n	8002060 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800205c:	429a      	cmp	r2, r3
 800205e:	d001      	beq.n	8002064 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40023800 	.word	0x40023800

08002074 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e041      	b.n	800210a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d106      	bne.n	80020a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7fe fe3c 	bl	8000d18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2202      	movs	r2, #2
 80020a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3304      	adds	r3, #4
 80020b0:	4619      	mov	r1, r3
 80020b2:	4610      	mov	r0, r2
 80020b4:	f000 f95e 	bl	8002374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b01      	cmp	r3, #1
 8002126:	d001      	beq.n	800212c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e046      	b.n	80021ba <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2202      	movs	r2, #2
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a23      	ldr	r2, [pc, #140]	@ (80021c8 <HAL_TIM_Base_Start+0xb4>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d022      	beq.n	8002184 <HAL_TIM_Base_Start+0x70>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002146:	d01d      	beq.n	8002184 <HAL_TIM_Base_Start+0x70>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a1f      	ldr	r2, [pc, #124]	@ (80021cc <HAL_TIM_Base_Start+0xb8>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d018      	beq.n	8002184 <HAL_TIM_Base_Start+0x70>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a1e      	ldr	r2, [pc, #120]	@ (80021d0 <HAL_TIM_Base_Start+0xbc>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d013      	beq.n	8002184 <HAL_TIM_Base_Start+0x70>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a1c      	ldr	r2, [pc, #112]	@ (80021d4 <HAL_TIM_Base_Start+0xc0>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d00e      	beq.n	8002184 <HAL_TIM_Base_Start+0x70>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a1b      	ldr	r2, [pc, #108]	@ (80021d8 <HAL_TIM_Base_Start+0xc4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d009      	beq.n	8002184 <HAL_TIM_Base_Start+0x70>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a19      	ldr	r2, [pc, #100]	@ (80021dc <HAL_TIM_Base_Start+0xc8>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d004      	beq.n	8002184 <HAL_TIM_Base_Start+0x70>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a18      	ldr	r2, [pc, #96]	@ (80021e0 <HAL_TIM_Base_Start+0xcc>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d111      	bne.n	80021a8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2b06      	cmp	r3, #6
 8002194:	d010      	beq.n	80021b8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f042 0201 	orr.w	r2, r2, #1
 80021a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021a6:	e007      	b.n	80021b8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f042 0201 	orr.w	r2, r2, #1
 80021b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40010000 	.word	0x40010000
 80021cc:	40000400 	.word	0x40000400
 80021d0:	40000800 	.word	0x40000800
 80021d4:	40000c00 	.word	0x40000c00
 80021d8:	40010400 	.word	0x40010400
 80021dc:	40014000 	.word	0x40014000
 80021e0:	40001800 	.word	0x40001800

080021e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d101      	bne.n	8002200 <HAL_TIM_ConfigClockSource+0x1c>
 80021fc:	2302      	movs	r3, #2
 80021fe:	e0b4      	b.n	800236a <HAL_TIM_ConfigClockSource+0x186>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2202      	movs	r2, #2
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800221e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002226:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002238:	d03e      	beq.n	80022b8 <HAL_TIM_ConfigClockSource+0xd4>
 800223a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800223e:	f200 8087 	bhi.w	8002350 <HAL_TIM_ConfigClockSource+0x16c>
 8002242:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002246:	f000 8086 	beq.w	8002356 <HAL_TIM_ConfigClockSource+0x172>
 800224a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800224e:	d87f      	bhi.n	8002350 <HAL_TIM_ConfigClockSource+0x16c>
 8002250:	2b70      	cmp	r3, #112	@ 0x70
 8002252:	d01a      	beq.n	800228a <HAL_TIM_ConfigClockSource+0xa6>
 8002254:	2b70      	cmp	r3, #112	@ 0x70
 8002256:	d87b      	bhi.n	8002350 <HAL_TIM_ConfigClockSource+0x16c>
 8002258:	2b60      	cmp	r3, #96	@ 0x60
 800225a:	d050      	beq.n	80022fe <HAL_TIM_ConfigClockSource+0x11a>
 800225c:	2b60      	cmp	r3, #96	@ 0x60
 800225e:	d877      	bhi.n	8002350 <HAL_TIM_ConfigClockSource+0x16c>
 8002260:	2b50      	cmp	r3, #80	@ 0x50
 8002262:	d03c      	beq.n	80022de <HAL_TIM_ConfigClockSource+0xfa>
 8002264:	2b50      	cmp	r3, #80	@ 0x50
 8002266:	d873      	bhi.n	8002350 <HAL_TIM_ConfigClockSource+0x16c>
 8002268:	2b40      	cmp	r3, #64	@ 0x40
 800226a:	d058      	beq.n	800231e <HAL_TIM_ConfigClockSource+0x13a>
 800226c:	2b40      	cmp	r3, #64	@ 0x40
 800226e:	d86f      	bhi.n	8002350 <HAL_TIM_ConfigClockSource+0x16c>
 8002270:	2b30      	cmp	r3, #48	@ 0x30
 8002272:	d064      	beq.n	800233e <HAL_TIM_ConfigClockSource+0x15a>
 8002274:	2b30      	cmp	r3, #48	@ 0x30
 8002276:	d86b      	bhi.n	8002350 <HAL_TIM_ConfigClockSource+0x16c>
 8002278:	2b20      	cmp	r3, #32
 800227a:	d060      	beq.n	800233e <HAL_TIM_ConfigClockSource+0x15a>
 800227c:	2b20      	cmp	r3, #32
 800227e:	d867      	bhi.n	8002350 <HAL_TIM_ConfigClockSource+0x16c>
 8002280:	2b00      	cmp	r3, #0
 8002282:	d05c      	beq.n	800233e <HAL_TIM_ConfigClockSource+0x15a>
 8002284:	2b10      	cmp	r3, #16
 8002286:	d05a      	beq.n	800233e <HAL_TIM_ConfigClockSource+0x15a>
 8002288:	e062      	b.n	8002350 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800229a:	f000 f991 	bl	80025c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80022ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	609a      	str	r2, [r3, #8]
      break;
 80022b6:	e04f      	b.n	8002358 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80022c8:	f000 f97a 	bl	80025c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022da:	609a      	str	r2, [r3, #8]
      break;
 80022dc:	e03c      	b.n	8002358 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ea:	461a      	mov	r2, r3
 80022ec:	f000 f8ee 	bl	80024cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2150      	movs	r1, #80	@ 0x50
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 f947 	bl	800258a <TIM_ITRx_SetConfig>
      break;
 80022fc:	e02c      	b.n	8002358 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800230a:	461a      	mov	r2, r3
 800230c:	f000 f90d 	bl	800252a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2160      	movs	r1, #96	@ 0x60
 8002316:	4618      	mov	r0, r3
 8002318:	f000 f937 	bl	800258a <TIM_ITRx_SetConfig>
      break;
 800231c:	e01c      	b.n	8002358 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800232a:	461a      	mov	r2, r3
 800232c:	f000 f8ce 	bl	80024cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2140      	movs	r1, #64	@ 0x40
 8002336:	4618      	mov	r0, r3
 8002338:	f000 f927 	bl	800258a <TIM_ITRx_SetConfig>
      break;
 800233c:	e00c      	b.n	8002358 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4619      	mov	r1, r3
 8002348:	4610      	mov	r0, r2
 800234a:	f000 f91e 	bl	800258a <TIM_ITRx_SetConfig>
      break;
 800234e:	e003      	b.n	8002358 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	73fb      	strb	r3, [r7, #15]
      break;
 8002354:	e000      	b.n	8002358 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002356:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002368:	7bfb      	ldrb	r3, [r7, #15]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a46      	ldr	r2, [pc, #280]	@ (80024a0 <TIM_Base_SetConfig+0x12c>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d013      	beq.n	80023b4 <TIM_Base_SetConfig+0x40>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002392:	d00f      	beq.n	80023b4 <TIM_Base_SetConfig+0x40>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a43      	ldr	r2, [pc, #268]	@ (80024a4 <TIM_Base_SetConfig+0x130>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d00b      	beq.n	80023b4 <TIM_Base_SetConfig+0x40>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a42      	ldr	r2, [pc, #264]	@ (80024a8 <TIM_Base_SetConfig+0x134>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d007      	beq.n	80023b4 <TIM_Base_SetConfig+0x40>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a41      	ldr	r2, [pc, #260]	@ (80024ac <TIM_Base_SetConfig+0x138>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d003      	beq.n	80023b4 <TIM_Base_SetConfig+0x40>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a40      	ldr	r2, [pc, #256]	@ (80024b0 <TIM_Base_SetConfig+0x13c>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d108      	bne.n	80023c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a35      	ldr	r2, [pc, #212]	@ (80024a0 <TIM_Base_SetConfig+0x12c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d02b      	beq.n	8002426 <TIM_Base_SetConfig+0xb2>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023d4:	d027      	beq.n	8002426 <TIM_Base_SetConfig+0xb2>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a32      	ldr	r2, [pc, #200]	@ (80024a4 <TIM_Base_SetConfig+0x130>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d023      	beq.n	8002426 <TIM_Base_SetConfig+0xb2>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a31      	ldr	r2, [pc, #196]	@ (80024a8 <TIM_Base_SetConfig+0x134>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d01f      	beq.n	8002426 <TIM_Base_SetConfig+0xb2>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a30      	ldr	r2, [pc, #192]	@ (80024ac <TIM_Base_SetConfig+0x138>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d01b      	beq.n	8002426 <TIM_Base_SetConfig+0xb2>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a2f      	ldr	r2, [pc, #188]	@ (80024b0 <TIM_Base_SetConfig+0x13c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d017      	beq.n	8002426 <TIM_Base_SetConfig+0xb2>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a2e      	ldr	r2, [pc, #184]	@ (80024b4 <TIM_Base_SetConfig+0x140>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d013      	beq.n	8002426 <TIM_Base_SetConfig+0xb2>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a2d      	ldr	r2, [pc, #180]	@ (80024b8 <TIM_Base_SetConfig+0x144>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d00f      	beq.n	8002426 <TIM_Base_SetConfig+0xb2>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a2c      	ldr	r2, [pc, #176]	@ (80024bc <TIM_Base_SetConfig+0x148>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d00b      	beq.n	8002426 <TIM_Base_SetConfig+0xb2>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a2b      	ldr	r2, [pc, #172]	@ (80024c0 <TIM_Base_SetConfig+0x14c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d007      	beq.n	8002426 <TIM_Base_SetConfig+0xb2>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a2a      	ldr	r2, [pc, #168]	@ (80024c4 <TIM_Base_SetConfig+0x150>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d003      	beq.n	8002426 <TIM_Base_SetConfig+0xb2>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a29      	ldr	r2, [pc, #164]	@ (80024c8 <TIM_Base_SetConfig+0x154>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d108      	bne.n	8002438 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800242c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	4313      	orrs	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	4313      	orrs	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a10      	ldr	r2, [pc, #64]	@ (80024a0 <TIM_Base_SetConfig+0x12c>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d003      	beq.n	800246c <TIM_Base_SetConfig+0xf8>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a12      	ldr	r2, [pc, #72]	@ (80024b0 <TIM_Base_SetConfig+0x13c>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d103      	bne.n	8002474 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	691a      	ldr	r2, [r3, #16]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b01      	cmp	r3, #1
 8002484:	d105      	bne.n	8002492 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	f023 0201 	bic.w	r2, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	611a      	str	r2, [r3, #16]
  }
}
 8002492:	bf00      	nop
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40010000 	.word	0x40010000
 80024a4:	40000400 	.word	0x40000400
 80024a8:	40000800 	.word	0x40000800
 80024ac:	40000c00 	.word	0x40000c00
 80024b0:	40010400 	.word	0x40010400
 80024b4:	40014000 	.word	0x40014000
 80024b8:	40014400 	.word	0x40014400
 80024bc:	40014800 	.word	0x40014800
 80024c0:	40001800 	.word	0x40001800
 80024c4:	40001c00 	.word	0x40001c00
 80024c8:	40002000 	.word	0x40002000

080024cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b087      	sub	sp, #28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	f023 0201 	bic.w	r2, r3, #1
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f023 030a 	bic.w	r3, r3, #10
 8002508:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	4313      	orrs	r3, r2
 8002510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	621a      	str	r2, [r3, #32]
}
 800251e:	bf00      	nop
 8002520:	371c      	adds	r7, #28
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800252a:	b480      	push	{r7}
 800252c:	b087      	sub	sp, #28
 800252e:	af00      	add	r7, sp, #0
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	f023 0210 	bic.w	r2, r3, #16
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002554:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	031b      	lsls	r3, r3, #12
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002566:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	4313      	orrs	r3, r2
 8002570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	621a      	str	r2, [r3, #32]
}
 800257e:	bf00      	nop
 8002580:	371c      	adds	r7, #28
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800258a:	b480      	push	{r7}
 800258c:	b085      	sub	sp, #20
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f043 0307 	orr.w	r3, r3, #7
 80025ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	609a      	str	r2, [r3, #8]
}
 80025b4:	bf00      	nop
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80025da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	021a      	lsls	r2, r3, #8
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	431a      	orrs	r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	609a      	str	r2, [r3, #8]
}
 80025f4:	bf00      	nop
 80025f6:	371c      	adds	r7, #28
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002610:	2b01      	cmp	r3, #1
 8002612:	d101      	bne.n	8002618 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002614:	2302      	movs	r3, #2
 8002616:	e05a      	b.n	80026ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2202      	movs	r2, #2
 8002624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800263e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	4313      	orrs	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a21      	ldr	r2, [pc, #132]	@ (80026dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d022      	beq.n	80026a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002664:	d01d      	beq.n	80026a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a1d      	ldr	r2, [pc, #116]	@ (80026e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d018      	beq.n	80026a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a1b      	ldr	r2, [pc, #108]	@ (80026e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d013      	beq.n	80026a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a1a      	ldr	r2, [pc, #104]	@ (80026e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d00e      	beq.n	80026a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a18      	ldr	r2, [pc, #96]	@ (80026ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d009      	beq.n	80026a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a17      	ldr	r2, [pc, #92]	@ (80026f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d004      	beq.n	80026a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a15      	ldr	r2, [pc, #84]	@ (80026f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d10c      	bne.n	80026bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	40010000 	.word	0x40010000
 80026e0:	40000400 	.word	0x40000400
 80026e4:	40000800 	.word	0x40000800
 80026e8:	40000c00 	.word	0x40000c00
 80026ec:	40010400 	.word	0x40010400
 80026f0:	40014000 	.word	0x40014000
 80026f4:	40001800 	.word	0x40001800

080026f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e042      	b.n	8002790 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d106      	bne.n	8002724 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7fe fb1a 	bl	8000d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2224      	movs	r2, #36	@ 0x24
 8002728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800273a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f973 	bl	8002a28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	691a      	ldr	r2, [r3, #16]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002750:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695a      	ldr	r2, [r3, #20]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002760:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002770:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2220      	movs	r2, #32
 800277c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2220      	movs	r2, #32
 8002784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08a      	sub	sp, #40	@ 0x28
 800279c:	af02      	add	r7, sp, #8
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	4613      	mov	r3, r2
 80027a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	d175      	bne.n	80028a4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d002      	beq.n	80027c4 <HAL_UART_Transmit+0x2c>
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e06e      	b.n	80028a6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2221      	movs	r2, #33	@ 0x21
 80027d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027d6:	f7fe fc0f 	bl	8000ff8 <HAL_GetTick>
 80027da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	88fa      	ldrh	r2, [r7, #6]
 80027e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	88fa      	ldrh	r2, [r7, #6]
 80027e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027f0:	d108      	bne.n	8002804 <HAL_UART_Transmit+0x6c>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d104      	bne.n	8002804 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	61bb      	str	r3, [r7, #24]
 8002802:	e003      	b.n	800280c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002808:	2300      	movs	r3, #0
 800280a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800280c:	e02e      	b.n	800286c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2200      	movs	r2, #0
 8002816:	2180      	movs	r1, #128	@ 0x80
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 f848 	bl	80028ae <UART_WaitOnFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2220      	movs	r2, #32
 8002828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e03a      	b.n	80028a6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10b      	bne.n	800284e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	461a      	mov	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002844:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	3302      	adds	r3, #2
 800284a:	61bb      	str	r3, [r7, #24]
 800284c:	e007      	b.n	800285e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	781a      	ldrb	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	3301      	adds	r3, #1
 800285c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002862:	b29b      	uxth	r3, r3
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002870:	b29b      	uxth	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1cb      	bne.n	800280e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	2200      	movs	r2, #0
 800287e:	2140      	movs	r1, #64	@ 0x40
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f000 f814 	bl	80028ae <UART_WaitOnFlagUntilTimeout>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d005      	beq.n	8002898 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2220      	movs	r2, #32
 8002890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e006      	b.n	80028a6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80028a0:	2300      	movs	r3, #0
 80028a2:	e000      	b.n	80028a6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80028a4:	2302      	movs	r3, #2
  }
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3720      	adds	r7, #32
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b086      	sub	sp, #24
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	60f8      	str	r0, [r7, #12]
 80028b6:	60b9      	str	r1, [r7, #8]
 80028b8:	603b      	str	r3, [r7, #0]
 80028ba:	4613      	mov	r3, r2
 80028bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028be:	e03b      	b.n	8002938 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028c0:	6a3b      	ldr	r3, [r7, #32]
 80028c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c6:	d037      	beq.n	8002938 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028c8:	f7fe fb96 	bl	8000ff8 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	6a3a      	ldr	r2, [r7, #32]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d302      	bcc.n	80028de <UART_WaitOnFlagUntilTimeout+0x30>
 80028d8:	6a3b      	ldr	r3, [r7, #32]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e03a      	b.n	8002958 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d023      	beq.n	8002938 <UART_WaitOnFlagUntilTimeout+0x8a>
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2b80      	cmp	r3, #128	@ 0x80
 80028f4:	d020      	beq.n	8002938 <UART_WaitOnFlagUntilTimeout+0x8a>
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2b40      	cmp	r3, #64	@ 0x40
 80028fa:	d01d      	beq.n	8002938 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b08      	cmp	r3, #8
 8002908:	d116      	bne.n	8002938 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800290a:	2300      	movs	r3, #0
 800290c:	617b      	str	r3, [r7, #20]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	617b      	str	r3, [r7, #20]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 f81d 	bl	8002960 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2208      	movs	r2, #8
 800292a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e00f      	b.n	8002958 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	4013      	ands	r3, r2
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	429a      	cmp	r2, r3
 8002946:	bf0c      	ite	eq
 8002948:	2301      	moveq	r3, #1
 800294a:	2300      	movne	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	461a      	mov	r2, r3
 8002950:	79fb      	ldrb	r3, [r7, #7]
 8002952:	429a      	cmp	r2, r3
 8002954:	d0b4      	beq.n	80028c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002960:	b480      	push	{r7}
 8002962:	b095      	sub	sp, #84	@ 0x54
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	330c      	adds	r3, #12
 800296e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002972:	e853 3f00 	ldrex	r3, [r3]
 8002976:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800297a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800297e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	330c      	adds	r3, #12
 8002986:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002988:	643a      	str	r2, [r7, #64]	@ 0x40
 800298a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800298c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800298e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002990:	e841 2300 	strex	r3, r2, [r1]
 8002994:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1e5      	bne.n	8002968 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	3314      	adds	r3, #20
 80029a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	e853 3f00 	ldrex	r3, [r3]
 80029aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f023 0301 	bic.w	r3, r3, #1
 80029b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	3314      	adds	r3, #20
 80029ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80029bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029c4:	e841 2300 	strex	r3, r2, [r1]
 80029c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80029ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1e5      	bne.n	800299c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d119      	bne.n	8002a0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	330c      	adds	r3, #12
 80029de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	e853 3f00 	ldrex	r3, [r3]
 80029e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f023 0310 	bic.w	r3, r3, #16
 80029ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	330c      	adds	r3, #12
 80029f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029f8:	61ba      	str	r2, [r7, #24]
 80029fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029fc:	6979      	ldr	r1, [r7, #20]
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	e841 2300 	strex	r3, r2, [r1]
 8002a04:	613b      	str	r3, [r7, #16]
   return(result);
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1e5      	bne.n	80029d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002a1a:	bf00      	nop
 8002a1c:	3754      	adds	r7, #84	@ 0x54
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
	...

08002a28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a2c:	b0c0      	sub	sp, #256	@ 0x100
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a44:	68d9      	ldr	r1, [r3, #12]
 8002a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	ea40 0301 	orr.w	r3, r0, r1
 8002a50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	431a      	orrs	r2, r3
 8002a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002a80:	f021 010c 	bic.w	r1, r1, #12
 8002a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002a8e:	430b      	orrs	r3, r1
 8002a90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aa2:	6999      	ldr	r1, [r3, #24]
 8002aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	ea40 0301 	orr.w	r3, r0, r1
 8002aae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	4b8f      	ldr	r3, [pc, #572]	@ (8002cf4 <UART_SetConfig+0x2cc>)
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d005      	beq.n	8002ac8 <UART_SetConfig+0xa0>
 8002abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	4b8d      	ldr	r3, [pc, #564]	@ (8002cf8 <UART_SetConfig+0x2d0>)
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d104      	bne.n	8002ad2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ac8:	f7fe fe78 	bl	80017bc <HAL_RCC_GetPCLK2Freq>
 8002acc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002ad0:	e003      	b.n	8002ada <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ad2:	f7fe fe5f 	bl	8001794 <HAL_RCC_GetPCLK1Freq>
 8002ad6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ae4:	f040 810c 	bne.w	8002d00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ae8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002aec:	2200      	movs	r2, #0
 8002aee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002af2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002af6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002afa:	4622      	mov	r2, r4
 8002afc:	462b      	mov	r3, r5
 8002afe:	1891      	adds	r1, r2, r2
 8002b00:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002b02:	415b      	adcs	r3, r3
 8002b04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b0a:	4621      	mov	r1, r4
 8002b0c:	eb12 0801 	adds.w	r8, r2, r1
 8002b10:	4629      	mov	r1, r5
 8002b12:	eb43 0901 	adc.w	r9, r3, r1
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	f04f 0300 	mov.w	r3, #0
 8002b1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b2a:	4690      	mov	r8, r2
 8002b2c:	4699      	mov	r9, r3
 8002b2e:	4623      	mov	r3, r4
 8002b30:	eb18 0303 	adds.w	r3, r8, r3
 8002b34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002b38:	462b      	mov	r3, r5
 8002b3a:	eb49 0303 	adc.w	r3, r9, r3
 8002b3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002b4e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002b52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002b56:	460b      	mov	r3, r1
 8002b58:	18db      	adds	r3, r3, r3
 8002b5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	eb42 0303 	adc.w	r3, r2, r3
 8002b62:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002b68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002b6c:	f7fd fba8 	bl	80002c0 <__aeabi_uldivmod>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4b61      	ldr	r3, [pc, #388]	@ (8002cfc <UART_SetConfig+0x2d4>)
 8002b76:	fba3 2302 	umull	r2, r3, r3, r2
 8002b7a:	095b      	lsrs	r3, r3, #5
 8002b7c:	011c      	lsls	r4, r3, #4
 8002b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b82:	2200      	movs	r2, #0
 8002b84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b88:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002b8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002b90:	4642      	mov	r2, r8
 8002b92:	464b      	mov	r3, r9
 8002b94:	1891      	adds	r1, r2, r2
 8002b96:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002b98:	415b      	adcs	r3, r3
 8002b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ba0:	4641      	mov	r1, r8
 8002ba2:	eb12 0a01 	adds.w	sl, r2, r1
 8002ba6:	4649      	mov	r1, r9
 8002ba8:	eb43 0b01 	adc.w	fp, r3, r1
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bc0:	4692      	mov	sl, r2
 8002bc2:	469b      	mov	fp, r3
 8002bc4:	4643      	mov	r3, r8
 8002bc6:	eb1a 0303 	adds.w	r3, sl, r3
 8002bca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002bce:	464b      	mov	r3, r9
 8002bd0:	eb4b 0303 	adc.w	r3, fp, r3
 8002bd4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002be4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002be8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002bec:	460b      	mov	r3, r1
 8002bee:	18db      	adds	r3, r3, r3
 8002bf0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	eb42 0303 	adc.w	r3, r2, r3
 8002bf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bfa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002bfe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002c02:	f7fd fb5d 	bl	80002c0 <__aeabi_uldivmod>
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4b3b      	ldr	r3, [pc, #236]	@ (8002cfc <UART_SetConfig+0x2d4>)
 8002c0e:	fba3 2301 	umull	r2, r3, r3, r1
 8002c12:	095b      	lsrs	r3, r3, #5
 8002c14:	2264      	movs	r2, #100	@ 0x64
 8002c16:	fb02 f303 	mul.w	r3, r2, r3
 8002c1a:	1acb      	subs	r3, r1, r3
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002c22:	4b36      	ldr	r3, [pc, #216]	@ (8002cfc <UART_SetConfig+0x2d4>)
 8002c24:	fba3 2302 	umull	r2, r3, r3, r2
 8002c28:	095b      	lsrs	r3, r3, #5
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002c30:	441c      	add	r4, r3
 8002c32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c36:	2200      	movs	r2, #0
 8002c38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c3c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002c40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002c44:	4642      	mov	r2, r8
 8002c46:	464b      	mov	r3, r9
 8002c48:	1891      	adds	r1, r2, r2
 8002c4a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c4c:	415b      	adcs	r3, r3
 8002c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002c54:	4641      	mov	r1, r8
 8002c56:	1851      	adds	r1, r2, r1
 8002c58:	6339      	str	r1, [r7, #48]	@ 0x30
 8002c5a:	4649      	mov	r1, r9
 8002c5c:	414b      	adcs	r3, r1
 8002c5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c60:	f04f 0200 	mov.w	r2, #0
 8002c64:	f04f 0300 	mov.w	r3, #0
 8002c68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002c6c:	4659      	mov	r1, fp
 8002c6e:	00cb      	lsls	r3, r1, #3
 8002c70:	4651      	mov	r1, sl
 8002c72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c76:	4651      	mov	r1, sl
 8002c78:	00ca      	lsls	r2, r1, #3
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4603      	mov	r3, r0
 8002c80:	4642      	mov	r2, r8
 8002c82:	189b      	adds	r3, r3, r2
 8002c84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c88:	464b      	mov	r3, r9
 8002c8a:	460a      	mov	r2, r1
 8002c8c:	eb42 0303 	adc.w	r3, r2, r3
 8002c90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002ca0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002ca4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002ca8:	460b      	mov	r3, r1
 8002caa:	18db      	adds	r3, r3, r3
 8002cac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cae:	4613      	mov	r3, r2
 8002cb0:	eb42 0303 	adc.w	r3, r2, r3
 8002cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002cba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002cbe:	f7fd faff 	bl	80002c0 <__aeabi_uldivmod>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8002cfc <UART_SetConfig+0x2d4>)
 8002cc8:	fba3 1302 	umull	r1, r3, r3, r2
 8002ccc:	095b      	lsrs	r3, r3, #5
 8002cce:	2164      	movs	r1, #100	@ 0x64
 8002cd0:	fb01 f303 	mul.w	r3, r1, r3
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	3332      	adds	r3, #50	@ 0x32
 8002cda:	4a08      	ldr	r2, [pc, #32]	@ (8002cfc <UART_SetConfig+0x2d4>)
 8002cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce0:	095b      	lsrs	r3, r3, #5
 8002ce2:	f003 0207 	and.w	r2, r3, #7
 8002ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4422      	add	r2, r4
 8002cee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002cf0:	e106      	b.n	8002f00 <UART_SetConfig+0x4d8>
 8002cf2:	bf00      	nop
 8002cf4:	40011000 	.word	0x40011000
 8002cf8:	40011400 	.word	0x40011400
 8002cfc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d04:	2200      	movs	r2, #0
 8002d06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002d0a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002d0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002d12:	4642      	mov	r2, r8
 8002d14:	464b      	mov	r3, r9
 8002d16:	1891      	adds	r1, r2, r2
 8002d18:	6239      	str	r1, [r7, #32]
 8002d1a:	415b      	adcs	r3, r3
 8002d1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d22:	4641      	mov	r1, r8
 8002d24:	1854      	adds	r4, r2, r1
 8002d26:	4649      	mov	r1, r9
 8002d28:	eb43 0501 	adc.w	r5, r3, r1
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	00eb      	lsls	r3, r5, #3
 8002d36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d3a:	00e2      	lsls	r2, r4, #3
 8002d3c:	4614      	mov	r4, r2
 8002d3e:	461d      	mov	r5, r3
 8002d40:	4643      	mov	r3, r8
 8002d42:	18e3      	adds	r3, r4, r3
 8002d44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d48:	464b      	mov	r3, r9
 8002d4a:	eb45 0303 	adc.w	r3, r5, r3
 8002d4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d5e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	f04f 0300 	mov.w	r3, #0
 8002d6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d6e:	4629      	mov	r1, r5
 8002d70:	008b      	lsls	r3, r1, #2
 8002d72:	4621      	mov	r1, r4
 8002d74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d78:	4621      	mov	r1, r4
 8002d7a:	008a      	lsls	r2, r1, #2
 8002d7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002d80:	f7fd fa9e 	bl	80002c0 <__aeabi_uldivmod>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4b60      	ldr	r3, [pc, #384]	@ (8002f0c <UART_SetConfig+0x4e4>)
 8002d8a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d8e:	095b      	lsrs	r3, r3, #5
 8002d90:	011c      	lsls	r4, r3, #4
 8002d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d96:	2200      	movs	r2, #0
 8002d98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d9c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002da0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002da4:	4642      	mov	r2, r8
 8002da6:	464b      	mov	r3, r9
 8002da8:	1891      	adds	r1, r2, r2
 8002daa:	61b9      	str	r1, [r7, #24]
 8002dac:	415b      	adcs	r3, r3
 8002dae:	61fb      	str	r3, [r7, #28]
 8002db0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002db4:	4641      	mov	r1, r8
 8002db6:	1851      	adds	r1, r2, r1
 8002db8:	6139      	str	r1, [r7, #16]
 8002dba:	4649      	mov	r1, r9
 8002dbc:	414b      	adcs	r3, r1
 8002dbe:	617b      	str	r3, [r7, #20]
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	f04f 0300 	mov.w	r3, #0
 8002dc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dcc:	4659      	mov	r1, fp
 8002dce:	00cb      	lsls	r3, r1, #3
 8002dd0:	4651      	mov	r1, sl
 8002dd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dd6:	4651      	mov	r1, sl
 8002dd8:	00ca      	lsls	r2, r1, #3
 8002dda:	4610      	mov	r0, r2
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4603      	mov	r3, r0
 8002de0:	4642      	mov	r2, r8
 8002de2:	189b      	adds	r3, r3, r2
 8002de4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002de8:	464b      	mov	r3, r9
 8002dea:	460a      	mov	r2, r1
 8002dec:	eb42 0303 	adc.w	r3, r2, r3
 8002df0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002dfe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002e0c:	4649      	mov	r1, r9
 8002e0e:	008b      	lsls	r3, r1, #2
 8002e10:	4641      	mov	r1, r8
 8002e12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e16:	4641      	mov	r1, r8
 8002e18:	008a      	lsls	r2, r1, #2
 8002e1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002e1e:	f7fd fa4f 	bl	80002c0 <__aeabi_uldivmod>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4611      	mov	r1, r2
 8002e28:	4b38      	ldr	r3, [pc, #224]	@ (8002f0c <UART_SetConfig+0x4e4>)
 8002e2a:	fba3 2301 	umull	r2, r3, r3, r1
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	2264      	movs	r2, #100	@ 0x64
 8002e32:	fb02 f303 	mul.w	r3, r2, r3
 8002e36:	1acb      	subs	r3, r1, r3
 8002e38:	011b      	lsls	r3, r3, #4
 8002e3a:	3332      	adds	r3, #50	@ 0x32
 8002e3c:	4a33      	ldr	r2, [pc, #204]	@ (8002f0c <UART_SetConfig+0x4e4>)
 8002e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e42:	095b      	lsrs	r3, r3, #5
 8002e44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e48:	441c      	add	r4, r3
 8002e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e4e:	2200      	movs	r2, #0
 8002e50:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e52:	677a      	str	r2, [r7, #116]	@ 0x74
 8002e54:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002e58:	4642      	mov	r2, r8
 8002e5a:	464b      	mov	r3, r9
 8002e5c:	1891      	adds	r1, r2, r2
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	415b      	adcs	r3, r3
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e68:	4641      	mov	r1, r8
 8002e6a:	1851      	adds	r1, r2, r1
 8002e6c:	6039      	str	r1, [r7, #0]
 8002e6e:	4649      	mov	r1, r9
 8002e70:	414b      	adcs	r3, r1
 8002e72:	607b      	str	r3, [r7, #4]
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e80:	4659      	mov	r1, fp
 8002e82:	00cb      	lsls	r3, r1, #3
 8002e84:	4651      	mov	r1, sl
 8002e86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e8a:	4651      	mov	r1, sl
 8002e8c:	00ca      	lsls	r2, r1, #3
 8002e8e:	4610      	mov	r0, r2
 8002e90:	4619      	mov	r1, r3
 8002e92:	4603      	mov	r3, r0
 8002e94:	4642      	mov	r2, r8
 8002e96:	189b      	adds	r3, r3, r2
 8002e98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e9a:	464b      	mov	r3, r9
 8002e9c:	460a      	mov	r2, r1
 8002e9e:	eb42 0303 	adc.w	r3, r2, r3
 8002ea2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	663b      	str	r3, [r7, #96]	@ 0x60
 8002eae:	667a      	str	r2, [r7, #100]	@ 0x64
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	f04f 0300 	mov.w	r3, #0
 8002eb8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002ebc:	4649      	mov	r1, r9
 8002ebe:	008b      	lsls	r3, r1, #2
 8002ec0:	4641      	mov	r1, r8
 8002ec2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ec6:	4641      	mov	r1, r8
 8002ec8:	008a      	lsls	r2, r1, #2
 8002eca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002ece:	f7fd f9f7 	bl	80002c0 <__aeabi_uldivmod>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8002f0c <UART_SetConfig+0x4e4>)
 8002ed8:	fba3 1302 	umull	r1, r3, r3, r2
 8002edc:	095b      	lsrs	r3, r3, #5
 8002ede:	2164      	movs	r1, #100	@ 0x64
 8002ee0:	fb01 f303 	mul.w	r3, r1, r3
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	3332      	adds	r3, #50	@ 0x32
 8002eea:	4a08      	ldr	r2, [pc, #32]	@ (8002f0c <UART_SetConfig+0x4e4>)
 8002eec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef0:	095b      	lsrs	r3, r3, #5
 8002ef2:	f003 020f 	and.w	r2, r3, #15
 8002ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4422      	add	r2, r4
 8002efe:	609a      	str	r2, [r3, #8]
}
 8002f00:	bf00      	nop
 8002f02:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002f06:	46bd      	mov	sp, r7
 8002f08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f0c:	51eb851f 	.word	0x51eb851f

08002f10 <sniprintf>:
 8002f10:	b40c      	push	{r2, r3}
 8002f12:	b530      	push	{r4, r5, lr}
 8002f14:	4b18      	ldr	r3, [pc, #96]	@ (8002f78 <sniprintf+0x68>)
 8002f16:	1e0c      	subs	r4, r1, #0
 8002f18:	681d      	ldr	r5, [r3, #0]
 8002f1a:	b09d      	sub	sp, #116	@ 0x74
 8002f1c:	da08      	bge.n	8002f30 <sniprintf+0x20>
 8002f1e:	238b      	movs	r3, #139	@ 0x8b
 8002f20:	602b      	str	r3, [r5, #0]
 8002f22:	f04f 30ff 	mov.w	r0, #4294967295
 8002f26:	b01d      	add	sp, #116	@ 0x74
 8002f28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002f2c:	b002      	add	sp, #8
 8002f2e:	4770      	bx	lr
 8002f30:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002f34:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8002f3e:	bf14      	ite	ne
 8002f40:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002f44:	4623      	moveq	r3, r4
 8002f46:	9304      	str	r3, [sp, #16]
 8002f48:	9307      	str	r3, [sp, #28]
 8002f4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f4e:	9002      	str	r0, [sp, #8]
 8002f50:	9006      	str	r0, [sp, #24]
 8002f52:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002f56:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002f58:	ab21      	add	r3, sp, #132	@ 0x84
 8002f5a:	a902      	add	r1, sp, #8
 8002f5c:	4628      	mov	r0, r5
 8002f5e:	9301      	str	r3, [sp, #4]
 8002f60:	f000 f994 	bl	800328c <_svfiprintf_r>
 8002f64:	1c43      	adds	r3, r0, #1
 8002f66:	bfbc      	itt	lt
 8002f68:	238b      	movlt	r3, #139	@ 0x8b
 8002f6a:	602b      	strlt	r3, [r5, #0]
 8002f6c:	2c00      	cmp	r4, #0
 8002f6e:	d0da      	beq.n	8002f26 <sniprintf+0x16>
 8002f70:	9b02      	ldr	r3, [sp, #8]
 8002f72:	2200      	movs	r2, #0
 8002f74:	701a      	strb	r2, [r3, #0]
 8002f76:	e7d6      	b.n	8002f26 <sniprintf+0x16>
 8002f78:	2000000c 	.word	0x2000000c

08002f7c <memset>:
 8002f7c:	4402      	add	r2, r0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d100      	bne.n	8002f86 <memset+0xa>
 8002f84:	4770      	bx	lr
 8002f86:	f803 1b01 	strb.w	r1, [r3], #1
 8002f8a:	e7f9      	b.n	8002f80 <memset+0x4>

08002f8c <__errno>:
 8002f8c:	4b01      	ldr	r3, [pc, #4]	@ (8002f94 <__errno+0x8>)
 8002f8e:	6818      	ldr	r0, [r3, #0]
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	2000000c 	.word	0x2000000c

08002f98 <__libc_init_array>:
 8002f98:	b570      	push	{r4, r5, r6, lr}
 8002f9a:	4d0d      	ldr	r5, [pc, #52]	@ (8002fd0 <__libc_init_array+0x38>)
 8002f9c:	4c0d      	ldr	r4, [pc, #52]	@ (8002fd4 <__libc_init_array+0x3c>)
 8002f9e:	1b64      	subs	r4, r4, r5
 8002fa0:	10a4      	asrs	r4, r4, #2
 8002fa2:	2600      	movs	r6, #0
 8002fa4:	42a6      	cmp	r6, r4
 8002fa6:	d109      	bne.n	8002fbc <__libc_init_array+0x24>
 8002fa8:	4d0b      	ldr	r5, [pc, #44]	@ (8002fd8 <__libc_init_array+0x40>)
 8002faa:	4c0c      	ldr	r4, [pc, #48]	@ (8002fdc <__libc_init_array+0x44>)
 8002fac:	f000 fc64 	bl	8003878 <_init>
 8002fb0:	1b64      	subs	r4, r4, r5
 8002fb2:	10a4      	asrs	r4, r4, #2
 8002fb4:	2600      	movs	r6, #0
 8002fb6:	42a6      	cmp	r6, r4
 8002fb8:	d105      	bne.n	8002fc6 <__libc_init_array+0x2e>
 8002fba:	bd70      	pop	{r4, r5, r6, pc}
 8002fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fc0:	4798      	blx	r3
 8002fc2:	3601      	adds	r6, #1
 8002fc4:	e7ee      	b.n	8002fa4 <__libc_init_array+0xc>
 8002fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fca:	4798      	blx	r3
 8002fcc:	3601      	adds	r6, #1
 8002fce:	e7f2      	b.n	8002fb6 <__libc_init_array+0x1e>
 8002fd0:	080039dc 	.word	0x080039dc
 8002fd4:	080039dc 	.word	0x080039dc
 8002fd8:	080039dc 	.word	0x080039dc
 8002fdc:	080039e0 	.word	0x080039e0

08002fe0 <__retarget_lock_acquire_recursive>:
 8002fe0:	4770      	bx	lr

08002fe2 <__retarget_lock_release_recursive>:
 8002fe2:	4770      	bx	lr

08002fe4 <_free_r>:
 8002fe4:	b538      	push	{r3, r4, r5, lr}
 8002fe6:	4605      	mov	r5, r0
 8002fe8:	2900      	cmp	r1, #0
 8002fea:	d041      	beq.n	8003070 <_free_r+0x8c>
 8002fec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ff0:	1f0c      	subs	r4, r1, #4
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	bfb8      	it	lt
 8002ff6:	18e4      	addlt	r4, r4, r3
 8002ff8:	f000 f8e0 	bl	80031bc <__malloc_lock>
 8002ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8003074 <_free_r+0x90>)
 8002ffe:	6813      	ldr	r3, [r2, #0]
 8003000:	b933      	cbnz	r3, 8003010 <_free_r+0x2c>
 8003002:	6063      	str	r3, [r4, #4]
 8003004:	6014      	str	r4, [r2, #0]
 8003006:	4628      	mov	r0, r5
 8003008:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800300c:	f000 b8dc 	b.w	80031c8 <__malloc_unlock>
 8003010:	42a3      	cmp	r3, r4
 8003012:	d908      	bls.n	8003026 <_free_r+0x42>
 8003014:	6820      	ldr	r0, [r4, #0]
 8003016:	1821      	adds	r1, r4, r0
 8003018:	428b      	cmp	r3, r1
 800301a:	bf01      	itttt	eq
 800301c:	6819      	ldreq	r1, [r3, #0]
 800301e:	685b      	ldreq	r3, [r3, #4]
 8003020:	1809      	addeq	r1, r1, r0
 8003022:	6021      	streq	r1, [r4, #0]
 8003024:	e7ed      	b.n	8003002 <_free_r+0x1e>
 8003026:	461a      	mov	r2, r3
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	b10b      	cbz	r3, 8003030 <_free_r+0x4c>
 800302c:	42a3      	cmp	r3, r4
 800302e:	d9fa      	bls.n	8003026 <_free_r+0x42>
 8003030:	6811      	ldr	r1, [r2, #0]
 8003032:	1850      	adds	r0, r2, r1
 8003034:	42a0      	cmp	r0, r4
 8003036:	d10b      	bne.n	8003050 <_free_r+0x6c>
 8003038:	6820      	ldr	r0, [r4, #0]
 800303a:	4401      	add	r1, r0
 800303c:	1850      	adds	r0, r2, r1
 800303e:	4283      	cmp	r3, r0
 8003040:	6011      	str	r1, [r2, #0]
 8003042:	d1e0      	bne.n	8003006 <_free_r+0x22>
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	6053      	str	r3, [r2, #4]
 800304a:	4408      	add	r0, r1
 800304c:	6010      	str	r0, [r2, #0]
 800304e:	e7da      	b.n	8003006 <_free_r+0x22>
 8003050:	d902      	bls.n	8003058 <_free_r+0x74>
 8003052:	230c      	movs	r3, #12
 8003054:	602b      	str	r3, [r5, #0]
 8003056:	e7d6      	b.n	8003006 <_free_r+0x22>
 8003058:	6820      	ldr	r0, [r4, #0]
 800305a:	1821      	adds	r1, r4, r0
 800305c:	428b      	cmp	r3, r1
 800305e:	bf04      	itt	eq
 8003060:	6819      	ldreq	r1, [r3, #0]
 8003062:	685b      	ldreq	r3, [r3, #4]
 8003064:	6063      	str	r3, [r4, #4]
 8003066:	bf04      	itt	eq
 8003068:	1809      	addeq	r1, r1, r0
 800306a:	6021      	streq	r1, [r4, #0]
 800306c:	6054      	str	r4, [r2, #4]
 800306e:	e7ca      	b.n	8003006 <_free_r+0x22>
 8003070:	bd38      	pop	{r3, r4, r5, pc}
 8003072:	bf00      	nop
 8003074:	20000254 	.word	0x20000254

08003078 <sbrk_aligned>:
 8003078:	b570      	push	{r4, r5, r6, lr}
 800307a:	4e0f      	ldr	r6, [pc, #60]	@ (80030b8 <sbrk_aligned+0x40>)
 800307c:	460c      	mov	r4, r1
 800307e:	6831      	ldr	r1, [r6, #0]
 8003080:	4605      	mov	r5, r0
 8003082:	b911      	cbnz	r1, 800308a <sbrk_aligned+0x12>
 8003084:	f000 fba4 	bl	80037d0 <_sbrk_r>
 8003088:	6030      	str	r0, [r6, #0]
 800308a:	4621      	mov	r1, r4
 800308c:	4628      	mov	r0, r5
 800308e:	f000 fb9f 	bl	80037d0 <_sbrk_r>
 8003092:	1c43      	adds	r3, r0, #1
 8003094:	d103      	bne.n	800309e <sbrk_aligned+0x26>
 8003096:	f04f 34ff 	mov.w	r4, #4294967295
 800309a:	4620      	mov	r0, r4
 800309c:	bd70      	pop	{r4, r5, r6, pc}
 800309e:	1cc4      	adds	r4, r0, #3
 80030a0:	f024 0403 	bic.w	r4, r4, #3
 80030a4:	42a0      	cmp	r0, r4
 80030a6:	d0f8      	beq.n	800309a <sbrk_aligned+0x22>
 80030a8:	1a21      	subs	r1, r4, r0
 80030aa:	4628      	mov	r0, r5
 80030ac:	f000 fb90 	bl	80037d0 <_sbrk_r>
 80030b0:	3001      	adds	r0, #1
 80030b2:	d1f2      	bne.n	800309a <sbrk_aligned+0x22>
 80030b4:	e7ef      	b.n	8003096 <sbrk_aligned+0x1e>
 80030b6:	bf00      	nop
 80030b8:	20000250 	.word	0x20000250

080030bc <_malloc_r>:
 80030bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030c0:	1ccd      	adds	r5, r1, #3
 80030c2:	f025 0503 	bic.w	r5, r5, #3
 80030c6:	3508      	adds	r5, #8
 80030c8:	2d0c      	cmp	r5, #12
 80030ca:	bf38      	it	cc
 80030cc:	250c      	movcc	r5, #12
 80030ce:	2d00      	cmp	r5, #0
 80030d0:	4606      	mov	r6, r0
 80030d2:	db01      	blt.n	80030d8 <_malloc_r+0x1c>
 80030d4:	42a9      	cmp	r1, r5
 80030d6:	d904      	bls.n	80030e2 <_malloc_r+0x26>
 80030d8:	230c      	movs	r3, #12
 80030da:	6033      	str	r3, [r6, #0]
 80030dc:	2000      	movs	r0, #0
 80030de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80031b8 <_malloc_r+0xfc>
 80030e6:	f000 f869 	bl	80031bc <__malloc_lock>
 80030ea:	f8d8 3000 	ldr.w	r3, [r8]
 80030ee:	461c      	mov	r4, r3
 80030f0:	bb44      	cbnz	r4, 8003144 <_malloc_r+0x88>
 80030f2:	4629      	mov	r1, r5
 80030f4:	4630      	mov	r0, r6
 80030f6:	f7ff ffbf 	bl	8003078 <sbrk_aligned>
 80030fa:	1c43      	adds	r3, r0, #1
 80030fc:	4604      	mov	r4, r0
 80030fe:	d158      	bne.n	80031b2 <_malloc_r+0xf6>
 8003100:	f8d8 4000 	ldr.w	r4, [r8]
 8003104:	4627      	mov	r7, r4
 8003106:	2f00      	cmp	r7, #0
 8003108:	d143      	bne.n	8003192 <_malloc_r+0xd6>
 800310a:	2c00      	cmp	r4, #0
 800310c:	d04b      	beq.n	80031a6 <_malloc_r+0xea>
 800310e:	6823      	ldr	r3, [r4, #0]
 8003110:	4639      	mov	r1, r7
 8003112:	4630      	mov	r0, r6
 8003114:	eb04 0903 	add.w	r9, r4, r3
 8003118:	f000 fb5a 	bl	80037d0 <_sbrk_r>
 800311c:	4581      	cmp	r9, r0
 800311e:	d142      	bne.n	80031a6 <_malloc_r+0xea>
 8003120:	6821      	ldr	r1, [r4, #0]
 8003122:	1a6d      	subs	r5, r5, r1
 8003124:	4629      	mov	r1, r5
 8003126:	4630      	mov	r0, r6
 8003128:	f7ff ffa6 	bl	8003078 <sbrk_aligned>
 800312c:	3001      	adds	r0, #1
 800312e:	d03a      	beq.n	80031a6 <_malloc_r+0xea>
 8003130:	6823      	ldr	r3, [r4, #0]
 8003132:	442b      	add	r3, r5
 8003134:	6023      	str	r3, [r4, #0]
 8003136:	f8d8 3000 	ldr.w	r3, [r8]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	bb62      	cbnz	r2, 8003198 <_malloc_r+0xdc>
 800313e:	f8c8 7000 	str.w	r7, [r8]
 8003142:	e00f      	b.n	8003164 <_malloc_r+0xa8>
 8003144:	6822      	ldr	r2, [r4, #0]
 8003146:	1b52      	subs	r2, r2, r5
 8003148:	d420      	bmi.n	800318c <_malloc_r+0xd0>
 800314a:	2a0b      	cmp	r2, #11
 800314c:	d917      	bls.n	800317e <_malloc_r+0xc2>
 800314e:	1961      	adds	r1, r4, r5
 8003150:	42a3      	cmp	r3, r4
 8003152:	6025      	str	r5, [r4, #0]
 8003154:	bf18      	it	ne
 8003156:	6059      	strne	r1, [r3, #4]
 8003158:	6863      	ldr	r3, [r4, #4]
 800315a:	bf08      	it	eq
 800315c:	f8c8 1000 	streq.w	r1, [r8]
 8003160:	5162      	str	r2, [r4, r5]
 8003162:	604b      	str	r3, [r1, #4]
 8003164:	4630      	mov	r0, r6
 8003166:	f000 f82f 	bl	80031c8 <__malloc_unlock>
 800316a:	f104 000b 	add.w	r0, r4, #11
 800316e:	1d23      	adds	r3, r4, #4
 8003170:	f020 0007 	bic.w	r0, r0, #7
 8003174:	1ac2      	subs	r2, r0, r3
 8003176:	bf1c      	itt	ne
 8003178:	1a1b      	subne	r3, r3, r0
 800317a:	50a3      	strne	r3, [r4, r2]
 800317c:	e7af      	b.n	80030de <_malloc_r+0x22>
 800317e:	6862      	ldr	r2, [r4, #4]
 8003180:	42a3      	cmp	r3, r4
 8003182:	bf0c      	ite	eq
 8003184:	f8c8 2000 	streq.w	r2, [r8]
 8003188:	605a      	strne	r2, [r3, #4]
 800318a:	e7eb      	b.n	8003164 <_malloc_r+0xa8>
 800318c:	4623      	mov	r3, r4
 800318e:	6864      	ldr	r4, [r4, #4]
 8003190:	e7ae      	b.n	80030f0 <_malloc_r+0x34>
 8003192:	463c      	mov	r4, r7
 8003194:	687f      	ldr	r7, [r7, #4]
 8003196:	e7b6      	b.n	8003106 <_malloc_r+0x4a>
 8003198:	461a      	mov	r2, r3
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	42a3      	cmp	r3, r4
 800319e:	d1fb      	bne.n	8003198 <_malloc_r+0xdc>
 80031a0:	2300      	movs	r3, #0
 80031a2:	6053      	str	r3, [r2, #4]
 80031a4:	e7de      	b.n	8003164 <_malloc_r+0xa8>
 80031a6:	230c      	movs	r3, #12
 80031a8:	6033      	str	r3, [r6, #0]
 80031aa:	4630      	mov	r0, r6
 80031ac:	f000 f80c 	bl	80031c8 <__malloc_unlock>
 80031b0:	e794      	b.n	80030dc <_malloc_r+0x20>
 80031b2:	6005      	str	r5, [r0, #0]
 80031b4:	e7d6      	b.n	8003164 <_malloc_r+0xa8>
 80031b6:	bf00      	nop
 80031b8:	20000254 	.word	0x20000254

080031bc <__malloc_lock>:
 80031bc:	4801      	ldr	r0, [pc, #4]	@ (80031c4 <__malloc_lock+0x8>)
 80031be:	f7ff bf0f 	b.w	8002fe0 <__retarget_lock_acquire_recursive>
 80031c2:	bf00      	nop
 80031c4:	2000024c 	.word	0x2000024c

080031c8 <__malloc_unlock>:
 80031c8:	4801      	ldr	r0, [pc, #4]	@ (80031d0 <__malloc_unlock+0x8>)
 80031ca:	f7ff bf0a 	b.w	8002fe2 <__retarget_lock_release_recursive>
 80031ce:	bf00      	nop
 80031d0:	2000024c 	.word	0x2000024c

080031d4 <__ssputs_r>:
 80031d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031d8:	688e      	ldr	r6, [r1, #8]
 80031da:	461f      	mov	r7, r3
 80031dc:	42be      	cmp	r6, r7
 80031de:	680b      	ldr	r3, [r1, #0]
 80031e0:	4682      	mov	sl, r0
 80031e2:	460c      	mov	r4, r1
 80031e4:	4690      	mov	r8, r2
 80031e6:	d82d      	bhi.n	8003244 <__ssputs_r+0x70>
 80031e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80031ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80031f0:	d026      	beq.n	8003240 <__ssputs_r+0x6c>
 80031f2:	6965      	ldr	r5, [r4, #20]
 80031f4:	6909      	ldr	r1, [r1, #16]
 80031f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031fa:	eba3 0901 	sub.w	r9, r3, r1
 80031fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003202:	1c7b      	adds	r3, r7, #1
 8003204:	444b      	add	r3, r9
 8003206:	106d      	asrs	r5, r5, #1
 8003208:	429d      	cmp	r5, r3
 800320a:	bf38      	it	cc
 800320c:	461d      	movcc	r5, r3
 800320e:	0553      	lsls	r3, r2, #21
 8003210:	d527      	bpl.n	8003262 <__ssputs_r+0x8e>
 8003212:	4629      	mov	r1, r5
 8003214:	f7ff ff52 	bl	80030bc <_malloc_r>
 8003218:	4606      	mov	r6, r0
 800321a:	b360      	cbz	r0, 8003276 <__ssputs_r+0xa2>
 800321c:	6921      	ldr	r1, [r4, #16]
 800321e:	464a      	mov	r2, r9
 8003220:	f000 fae6 	bl	80037f0 <memcpy>
 8003224:	89a3      	ldrh	r3, [r4, #12]
 8003226:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800322a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800322e:	81a3      	strh	r3, [r4, #12]
 8003230:	6126      	str	r6, [r4, #16]
 8003232:	6165      	str	r5, [r4, #20]
 8003234:	444e      	add	r6, r9
 8003236:	eba5 0509 	sub.w	r5, r5, r9
 800323a:	6026      	str	r6, [r4, #0]
 800323c:	60a5      	str	r5, [r4, #8]
 800323e:	463e      	mov	r6, r7
 8003240:	42be      	cmp	r6, r7
 8003242:	d900      	bls.n	8003246 <__ssputs_r+0x72>
 8003244:	463e      	mov	r6, r7
 8003246:	6820      	ldr	r0, [r4, #0]
 8003248:	4632      	mov	r2, r6
 800324a:	4641      	mov	r1, r8
 800324c:	f000 faa6 	bl	800379c <memmove>
 8003250:	68a3      	ldr	r3, [r4, #8]
 8003252:	1b9b      	subs	r3, r3, r6
 8003254:	60a3      	str	r3, [r4, #8]
 8003256:	6823      	ldr	r3, [r4, #0]
 8003258:	4433      	add	r3, r6
 800325a:	6023      	str	r3, [r4, #0]
 800325c:	2000      	movs	r0, #0
 800325e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003262:	462a      	mov	r2, r5
 8003264:	f000 fad2 	bl	800380c <_realloc_r>
 8003268:	4606      	mov	r6, r0
 800326a:	2800      	cmp	r0, #0
 800326c:	d1e0      	bne.n	8003230 <__ssputs_r+0x5c>
 800326e:	6921      	ldr	r1, [r4, #16]
 8003270:	4650      	mov	r0, sl
 8003272:	f7ff feb7 	bl	8002fe4 <_free_r>
 8003276:	230c      	movs	r3, #12
 8003278:	f8ca 3000 	str.w	r3, [sl]
 800327c:	89a3      	ldrh	r3, [r4, #12]
 800327e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003282:	81a3      	strh	r3, [r4, #12]
 8003284:	f04f 30ff 	mov.w	r0, #4294967295
 8003288:	e7e9      	b.n	800325e <__ssputs_r+0x8a>
	...

0800328c <_svfiprintf_r>:
 800328c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003290:	4698      	mov	r8, r3
 8003292:	898b      	ldrh	r3, [r1, #12]
 8003294:	061b      	lsls	r3, r3, #24
 8003296:	b09d      	sub	sp, #116	@ 0x74
 8003298:	4607      	mov	r7, r0
 800329a:	460d      	mov	r5, r1
 800329c:	4614      	mov	r4, r2
 800329e:	d510      	bpl.n	80032c2 <_svfiprintf_r+0x36>
 80032a0:	690b      	ldr	r3, [r1, #16]
 80032a2:	b973      	cbnz	r3, 80032c2 <_svfiprintf_r+0x36>
 80032a4:	2140      	movs	r1, #64	@ 0x40
 80032a6:	f7ff ff09 	bl	80030bc <_malloc_r>
 80032aa:	6028      	str	r0, [r5, #0]
 80032ac:	6128      	str	r0, [r5, #16]
 80032ae:	b930      	cbnz	r0, 80032be <_svfiprintf_r+0x32>
 80032b0:	230c      	movs	r3, #12
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	f04f 30ff 	mov.w	r0, #4294967295
 80032b8:	b01d      	add	sp, #116	@ 0x74
 80032ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032be:	2340      	movs	r3, #64	@ 0x40
 80032c0:	616b      	str	r3, [r5, #20]
 80032c2:	2300      	movs	r3, #0
 80032c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80032c6:	2320      	movs	r3, #32
 80032c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80032cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80032d0:	2330      	movs	r3, #48	@ 0x30
 80032d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003470 <_svfiprintf_r+0x1e4>
 80032d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80032da:	f04f 0901 	mov.w	r9, #1
 80032de:	4623      	mov	r3, r4
 80032e0:	469a      	mov	sl, r3
 80032e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032e6:	b10a      	cbz	r2, 80032ec <_svfiprintf_r+0x60>
 80032e8:	2a25      	cmp	r2, #37	@ 0x25
 80032ea:	d1f9      	bne.n	80032e0 <_svfiprintf_r+0x54>
 80032ec:	ebba 0b04 	subs.w	fp, sl, r4
 80032f0:	d00b      	beq.n	800330a <_svfiprintf_r+0x7e>
 80032f2:	465b      	mov	r3, fp
 80032f4:	4622      	mov	r2, r4
 80032f6:	4629      	mov	r1, r5
 80032f8:	4638      	mov	r0, r7
 80032fa:	f7ff ff6b 	bl	80031d4 <__ssputs_r>
 80032fe:	3001      	adds	r0, #1
 8003300:	f000 80a7 	beq.w	8003452 <_svfiprintf_r+0x1c6>
 8003304:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003306:	445a      	add	r2, fp
 8003308:	9209      	str	r2, [sp, #36]	@ 0x24
 800330a:	f89a 3000 	ldrb.w	r3, [sl]
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 809f 	beq.w	8003452 <_svfiprintf_r+0x1c6>
 8003314:	2300      	movs	r3, #0
 8003316:	f04f 32ff 	mov.w	r2, #4294967295
 800331a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800331e:	f10a 0a01 	add.w	sl, sl, #1
 8003322:	9304      	str	r3, [sp, #16]
 8003324:	9307      	str	r3, [sp, #28]
 8003326:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800332a:	931a      	str	r3, [sp, #104]	@ 0x68
 800332c:	4654      	mov	r4, sl
 800332e:	2205      	movs	r2, #5
 8003330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003334:	484e      	ldr	r0, [pc, #312]	@ (8003470 <_svfiprintf_r+0x1e4>)
 8003336:	f7fc ff73 	bl	8000220 <memchr>
 800333a:	9a04      	ldr	r2, [sp, #16]
 800333c:	b9d8      	cbnz	r0, 8003376 <_svfiprintf_r+0xea>
 800333e:	06d0      	lsls	r0, r2, #27
 8003340:	bf44      	itt	mi
 8003342:	2320      	movmi	r3, #32
 8003344:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003348:	0711      	lsls	r1, r2, #28
 800334a:	bf44      	itt	mi
 800334c:	232b      	movmi	r3, #43	@ 0x2b
 800334e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003352:	f89a 3000 	ldrb.w	r3, [sl]
 8003356:	2b2a      	cmp	r3, #42	@ 0x2a
 8003358:	d015      	beq.n	8003386 <_svfiprintf_r+0xfa>
 800335a:	9a07      	ldr	r2, [sp, #28]
 800335c:	4654      	mov	r4, sl
 800335e:	2000      	movs	r0, #0
 8003360:	f04f 0c0a 	mov.w	ip, #10
 8003364:	4621      	mov	r1, r4
 8003366:	f811 3b01 	ldrb.w	r3, [r1], #1
 800336a:	3b30      	subs	r3, #48	@ 0x30
 800336c:	2b09      	cmp	r3, #9
 800336e:	d94b      	bls.n	8003408 <_svfiprintf_r+0x17c>
 8003370:	b1b0      	cbz	r0, 80033a0 <_svfiprintf_r+0x114>
 8003372:	9207      	str	r2, [sp, #28]
 8003374:	e014      	b.n	80033a0 <_svfiprintf_r+0x114>
 8003376:	eba0 0308 	sub.w	r3, r0, r8
 800337a:	fa09 f303 	lsl.w	r3, r9, r3
 800337e:	4313      	orrs	r3, r2
 8003380:	9304      	str	r3, [sp, #16]
 8003382:	46a2      	mov	sl, r4
 8003384:	e7d2      	b.n	800332c <_svfiprintf_r+0xa0>
 8003386:	9b03      	ldr	r3, [sp, #12]
 8003388:	1d19      	adds	r1, r3, #4
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	9103      	str	r1, [sp, #12]
 800338e:	2b00      	cmp	r3, #0
 8003390:	bfbb      	ittet	lt
 8003392:	425b      	neglt	r3, r3
 8003394:	f042 0202 	orrlt.w	r2, r2, #2
 8003398:	9307      	strge	r3, [sp, #28]
 800339a:	9307      	strlt	r3, [sp, #28]
 800339c:	bfb8      	it	lt
 800339e:	9204      	strlt	r2, [sp, #16]
 80033a0:	7823      	ldrb	r3, [r4, #0]
 80033a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80033a4:	d10a      	bne.n	80033bc <_svfiprintf_r+0x130>
 80033a6:	7863      	ldrb	r3, [r4, #1]
 80033a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80033aa:	d132      	bne.n	8003412 <_svfiprintf_r+0x186>
 80033ac:	9b03      	ldr	r3, [sp, #12]
 80033ae:	1d1a      	adds	r2, r3, #4
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	9203      	str	r2, [sp, #12]
 80033b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80033b8:	3402      	adds	r4, #2
 80033ba:	9305      	str	r3, [sp, #20]
 80033bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003480 <_svfiprintf_r+0x1f4>
 80033c0:	7821      	ldrb	r1, [r4, #0]
 80033c2:	2203      	movs	r2, #3
 80033c4:	4650      	mov	r0, sl
 80033c6:	f7fc ff2b 	bl	8000220 <memchr>
 80033ca:	b138      	cbz	r0, 80033dc <_svfiprintf_r+0x150>
 80033cc:	9b04      	ldr	r3, [sp, #16]
 80033ce:	eba0 000a 	sub.w	r0, r0, sl
 80033d2:	2240      	movs	r2, #64	@ 0x40
 80033d4:	4082      	lsls	r2, r0
 80033d6:	4313      	orrs	r3, r2
 80033d8:	3401      	adds	r4, #1
 80033da:	9304      	str	r3, [sp, #16]
 80033dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033e0:	4824      	ldr	r0, [pc, #144]	@ (8003474 <_svfiprintf_r+0x1e8>)
 80033e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80033e6:	2206      	movs	r2, #6
 80033e8:	f7fc ff1a 	bl	8000220 <memchr>
 80033ec:	2800      	cmp	r0, #0
 80033ee:	d036      	beq.n	800345e <_svfiprintf_r+0x1d2>
 80033f0:	4b21      	ldr	r3, [pc, #132]	@ (8003478 <_svfiprintf_r+0x1ec>)
 80033f2:	bb1b      	cbnz	r3, 800343c <_svfiprintf_r+0x1b0>
 80033f4:	9b03      	ldr	r3, [sp, #12]
 80033f6:	3307      	adds	r3, #7
 80033f8:	f023 0307 	bic.w	r3, r3, #7
 80033fc:	3308      	adds	r3, #8
 80033fe:	9303      	str	r3, [sp, #12]
 8003400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003402:	4433      	add	r3, r6
 8003404:	9309      	str	r3, [sp, #36]	@ 0x24
 8003406:	e76a      	b.n	80032de <_svfiprintf_r+0x52>
 8003408:	fb0c 3202 	mla	r2, ip, r2, r3
 800340c:	460c      	mov	r4, r1
 800340e:	2001      	movs	r0, #1
 8003410:	e7a8      	b.n	8003364 <_svfiprintf_r+0xd8>
 8003412:	2300      	movs	r3, #0
 8003414:	3401      	adds	r4, #1
 8003416:	9305      	str	r3, [sp, #20]
 8003418:	4619      	mov	r1, r3
 800341a:	f04f 0c0a 	mov.w	ip, #10
 800341e:	4620      	mov	r0, r4
 8003420:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003424:	3a30      	subs	r2, #48	@ 0x30
 8003426:	2a09      	cmp	r2, #9
 8003428:	d903      	bls.n	8003432 <_svfiprintf_r+0x1a6>
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0c6      	beq.n	80033bc <_svfiprintf_r+0x130>
 800342e:	9105      	str	r1, [sp, #20]
 8003430:	e7c4      	b.n	80033bc <_svfiprintf_r+0x130>
 8003432:	fb0c 2101 	mla	r1, ip, r1, r2
 8003436:	4604      	mov	r4, r0
 8003438:	2301      	movs	r3, #1
 800343a:	e7f0      	b.n	800341e <_svfiprintf_r+0x192>
 800343c:	ab03      	add	r3, sp, #12
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	462a      	mov	r2, r5
 8003442:	4b0e      	ldr	r3, [pc, #56]	@ (800347c <_svfiprintf_r+0x1f0>)
 8003444:	a904      	add	r1, sp, #16
 8003446:	4638      	mov	r0, r7
 8003448:	f3af 8000 	nop.w
 800344c:	1c42      	adds	r2, r0, #1
 800344e:	4606      	mov	r6, r0
 8003450:	d1d6      	bne.n	8003400 <_svfiprintf_r+0x174>
 8003452:	89ab      	ldrh	r3, [r5, #12]
 8003454:	065b      	lsls	r3, r3, #25
 8003456:	f53f af2d 	bmi.w	80032b4 <_svfiprintf_r+0x28>
 800345a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800345c:	e72c      	b.n	80032b8 <_svfiprintf_r+0x2c>
 800345e:	ab03      	add	r3, sp, #12
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	462a      	mov	r2, r5
 8003464:	4b05      	ldr	r3, [pc, #20]	@ (800347c <_svfiprintf_r+0x1f0>)
 8003466:	a904      	add	r1, sp, #16
 8003468:	4638      	mov	r0, r7
 800346a:	f000 f879 	bl	8003560 <_printf_i>
 800346e:	e7ed      	b.n	800344c <_svfiprintf_r+0x1c0>
 8003470:	080039a0 	.word	0x080039a0
 8003474:	080039aa 	.word	0x080039aa
 8003478:	00000000 	.word	0x00000000
 800347c:	080031d5 	.word	0x080031d5
 8003480:	080039a6 	.word	0x080039a6

08003484 <_printf_common>:
 8003484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003488:	4616      	mov	r6, r2
 800348a:	4698      	mov	r8, r3
 800348c:	688a      	ldr	r2, [r1, #8]
 800348e:	690b      	ldr	r3, [r1, #16]
 8003490:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003494:	4293      	cmp	r3, r2
 8003496:	bfb8      	it	lt
 8003498:	4613      	movlt	r3, r2
 800349a:	6033      	str	r3, [r6, #0]
 800349c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80034a0:	4607      	mov	r7, r0
 80034a2:	460c      	mov	r4, r1
 80034a4:	b10a      	cbz	r2, 80034aa <_printf_common+0x26>
 80034a6:	3301      	adds	r3, #1
 80034a8:	6033      	str	r3, [r6, #0]
 80034aa:	6823      	ldr	r3, [r4, #0]
 80034ac:	0699      	lsls	r1, r3, #26
 80034ae:	bf42      	ittt	mi
 80034b0:	6833      	ldrmi	r3, [r6, #0]
 80034b2:	3302      	addmi	r3, #2
 80034b4:	6033      	strmi	r3, [r6, #0]
 80034b6:	6825      	ldr	r5, [r4, #0]
 80034b8:	f015 0506 	ands.w	r5, r5, #6
 80034bc:	d106      	bne.n	80034cc <_printf_common+0x48>
 80034be:	f104 0a19 	add.w	sl, r4, #25
 80034c2:	68e3      	ldr	r3, [r4, #12]
 80034c4:	6832      	ldr	r2, [r6, #0]
 80034c6:	1a9b      	subs	r3, r3, r2
 80034c8:	42ab      	cmp	r3, r5
 80034ca:	dc26      	bgt.n	800351a <_printf_common+0x96>
 80034cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80034d0:	6822      	ldr	r2, [r4, #0]
 80034d2:	3b00      	subs	r3, #0
 80034d4:	bf18      	it	ne
 80034d6:	2301      	movne	r3, #1
 80034d8:	0692      	lsls	r2, r2, #26
 80034da:	d42b      	bmi.n	8003534 <_printf_common+0xb0>
 80034dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80034e0:	4641      	mov	r1, r8
 80034e2:	4638      	mov	r0, r7
 80034e4:	47c8      	blx	r9
 80034e6:	3001      	adds	r0, #1
 80034e8:	d01e      	beq.n	8003528 <_printf_common+0xa4>
 80034ea:	6823      	ldr	r3, [r4, #0]
 80034ec:	6922      	ldr	r2, [r4, #16]
 80034ee:	f003 0306 	and.w	r3, r3, #6
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	bf02      	ittt	eq
 80034f6:	68e5      	ldreq	r5, [r4, #12]
 80034f8:	6833      	ldreq	r3, [r6, #0]
 80034fa:	1aed      	subeq	r5, r5, r3
 80034fc:	68a3      	ldr	r3, [r4, #8]
 80034fe:	bf0c      	ite	eq
 8003500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003504:	2500      	movne	r5, #0
 8003506:	4293      	cmp	r3, r2
 8003508:	bfc4      	itt	gt
 800350a:	1a9b      	subgt	r3, r3, r2
 800350c:	18ed      	addgt	r5, r5, r3
 800350e:	2600      	movs	r6, #0
 8003510:	341a      	adds	r4, #26
 8003512:	42b5      	cmp	r5, r6
 8003514:	d11a      	bne.n	800354c <_printf_common+0xc8>
 8003516:	2000      	movs	r0, #0
 8003518:	e008      	b.n	800352c <_printf_common+0xa8>
 800351a:	2301      	movs	r3, #1
 800351c:	4652      	mov	r2, sl
 800351e:	4641      	mov	r1, r8
 8003520:	4638      	mov	r0, r7
 8003522:	47c8      	blx	r9
 8003524:	3001      	adds	r0, #1
 8003526:	d103      	bne.n	8003530 <_printf_common+0xac>
 8003528:	f04f 30ff 	mov.w	r0, #4294967295
 800352c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003530:	3501      	adds	r5, #1
 8003532:	e7c6      	b.n	80034c2 <_printf_common+0x3e>
 8003534:	18e1      	adds	r1, r4, r3
 8003536:	1c5a      	adds	r2, r3, #1
 8003538:	2030      	movs	r0, #48	@ 0x30
 800353a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800353e:	4422      	add	r2, r4
 8003540:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003544:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003548:	3302      	adds	r3, #2
 800354a:	e7c7      	b.n	80034dc <_printf_common+0x58>
 800354c:	2301      	movs	r3, #1
 800354e:	4622      	mov	r2, r4
 8003550:	4641      	mov	r1, r8
 8003552:	4638      	mov	r0, r7
 8003554:	47c8      	blx	r9
 8003556:	3001      	adds	r0, #1
 8003558:	d0e6      	beq.n	8003528 <_printf_common+0xa4>
 800355a:	3601      	adds	r6, #1
 800355c:	e7d9      	b.n	8003512 <_printf_common+0x8e>
	...

08003560 <_printf_i>:
 8003560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003564:	7e0f      	ldrb	r7, [r1, #24]
 8003566:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003568:	2f78      	cmp	r7, #120	@ 0x78
 800356a:	4691      	mov	r9, r2
 800356c:	4680      	mov	r8, r0
 800356e:	460c      	mov	r4, r1
 8003570:	469a      	mov	sl, r3
 8003572:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003576:	d807      	bhi.n	8003588 <_printf_i+0x28>
 8003578:	2f62      	cmp	r7, #98	@ 0x62
 800357a:	d80a      	bhi.n	8003592 <_printf_i+0x32>
 800357c:	2f00      	cmp	r7, #0
 800357e:	f000 80d1 	beq.w	8003724 <_printf_i+0x1c4>
 8003582:	2f58      	cmp	r7, #88	@ 0x58
 8003584:	f000 80b8 	beq.w	80036f8 <_printf_i+0x198>
 8003588:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800358c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003590:	e03a      	b.n	8003608 <_printf_i+0xa8>
 8003592:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003596:	2b15      	cmp	r3, #21
 8003598:	d8f6      	bhi.n	8003588 <_printf_i+0x28>
 800359a:	a101      	add	r1, pc, #4	@ (adr r1, 80035a0 <_printf_i+0x40>)
 800359c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035a0:	080035f9 	.word	0x080035f9
 80035a4:	0800360d 	.word	0x0800360d
 80035a8:	08003589 	.word	0x08003589
 80035ac:	08003589 	.word	0x08003589
 80035b0:	08003589 	.word	0x08003589
 80035b4:	08003589 	.word	0x08003589
 80035b8:	0800360d 	.word	0x0800360d
 80035bc:	08003589 	.word	0x08003589
 80035c0:	08003589 	.word	0x08003589
 80035c4:	08003589 	.word	0x08003589
 80035c8:	08003589 	.word	0x08003589
 80035cc:	0800370b 	.word	0x0800370b
 80035d0:	08003637 	.word	0x08003637
 80035d4:	080036c5 	.word	0x080036c5
 80035d8:	08003589 	.word	0x08003589
 80035dc:	08003589 	.word	0x08003589
 80035e0:	0800372d 	.word	0x0800372d
 80035e4:	08003589 	.word	0x08003589
 80035e8:	08003637 	.word	0x08003637
 80035ec:	08003589 	.word	0x08003589
 80035f0:	08003589 	.word	0x08003589
 80035f4:	080036cd 	.word	0x080036cd
 80035f8:	6833      	ldr	r3, [r6, #0]
 80035fa:	1d1a      	adds	r2, r3, #4
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6032      	str	r2, [r6, #0]
 8003600:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003604:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003608:	2301      	movs	r3, #1
 800360a:	e09c      	b.n	8003746 <_printf_i+0x1e6>
 800360c:	6833      	ldr	r3, [r6, #0]
 800360e:	6820      	ldr	r0, [r4, #0]
 8003610:	1d19      	adds	r1, r3, #4
 8003612:	6031      	str	r1, [r6, #0]
 8003614:	0606      	lsls	r6, r0, #24
 8003616:	d501      	bpl.n	800361c <_printf_i+0xbc>
 8003618:	681d      	ldr	r5, [r3, #0]
 800361a:	e003      	b.n	8003624 <_printf_i+0xc4>
 800361c:	0645      	lsls	r5, r0, #25
 800361e:	d5fb      	bpl.n	8003618 <_printf_i+0xb8>
 8003620:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003624:	2d00      	cmp	r5, #0
 8003626:	da03      	bge.n	8003630 <_printf_i+0xd0>
 8003628:	232d      	movs	r3, #45	@ 0x2d
 800362a:	426d      	negs	r5, r5
 800362c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003630:	4858      	ldr	r0, [pc, #352]	@ (8003794 <_printf_i+0x234>)
 8003632:	230a      	movs	r3, #10
 8003634:	e011      	b.n	800365a <_printf_i+0xfa>
 8003636:	6821      	ldr	r1, [r4, #0]
 8003638:	6833      	ldr	r3, [r6, #0]
 800363a:	0608      	lsls	r0, r1, #24
 800363c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003640:	d402      	bmi.n	8003648 <_printf_i+0xe8>
 8003642:	0649      	lsls	r1, r1, #25
 8003644:	bf48      	it	mi
 8003646:	b2ad      	uxthmi	r5, r5
 8003648:	2f6f      	cmp	r7, #111	@ 0x6f
 800364a:	4852      	ldr	r0, [pc, #328]	@ (8003794 <_printf_i+0x234>)
 800364c:	6033      	str	r3, [r6, #0]
 800364e:	bf14      	ite	ne
 8003650:	230a      	movne	r3, #10
 8003652:	2308      	moveq	r3, #8
 8003654:	2100      	movs	r1, #0
 8003656:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800365a:	6866      	ldr	r6, [r4, #4]
 800365c:	60a6      	str	r6, [r4, #8]
 800365e:	2e00      	cmp	r6, #0
 8003660:	db05      	blt.n	800366e <_printf_i+0x10e>
 8003662:	6821      	ldr	r1, [r4, #0]
 8003664:	432e      	orrs	r6, r5
 8003666:	f021 0104 	bic.w	r1, r1, #4
 800366a:	6021      	str	r1, [r4, #0]
 800366c:	d04b      	beq.n	8003706 <_printf_i+0x1a6>
 800366e:	4616      	mov	r6, r2
 8003670:	fbb5 f1f3 	udiv	r1, r5, r3
 8003674:	fb03 5711 	mls	r7, r3, r1, r5
 8003678:	5dc7      	ldrb	r7, [r0, r7]
 800367a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800367e:	462f      	mov	r7, r5
 8003680:	42bb      	cmp	r3, r7
 8003682:	460d      	mov	r5, r1
 8003684:	d9f4      	bls.n	8003670 <_printf_i+0x110>
 8003686:	2b08      	cmp	r3, #8
 8003688:	d10b      	bne.n	80036a2 <_printf_i+0x142>
 800368a:	6823      	ldr	r3, [r4, #0]
 800368c:	07df      	lsls	r7, r3, #31
 800368e:	d508      	bpl.n	80036a2 <_printf_i+0x142>
 8003690:	6923      	ldr	r3, [r4, #16]
 8003692:	6861      	ldr	r1, [r4, #4]
 8003694:	4299      	cmp	r1, r3
 8003696:	bfde      	ittt	le
 8003698:	2330      	movle	r3, #48	@ 0x30
 800369a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800369e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80036a2:	1b92      	subs	r2, r2, r6
 80036a4:	6122      	str	r2, [r4, #16]
 80036a6:	f8cd a000 	str.w	sl, [sp]
 80036aa:	464b      	mov	r3, r9
 80036ac:	aa03      	add	r2, sp, #12
 80036ae:	4621      	mov	r1, r4
 80036b0:	4640      	mov	r0, r8
 80036b2:	f7ff fee7 	bl	8003484 <_printf_common>
 80036b6:	3001      	adds	r0, #1
 80036b8:	d14a      	bne.n	8003750 <_printf_i+0x1f0>
 80036ba:	f04f 30ff 	mov.w	r0, #4294967295
 80036be:	b004      	add	sp, #16
 80036c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036c4:	6823      	ldr	r3, [r4, #0]
 80036c6:	f043 0320 	orr.w	r3, r3, #32
 80036ca:	6023      	str	r3, [r4, #0]
 80036cc:	4832      	ldr	r0, [pc, #200]	@ (8003798 <_printf_i+0x238>)
 80036ce:	2778      	movs	r7, #120	@ 0x78
 80036d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80036d4:	6823      	ldr	r3, [r4, #0]
 80036d6:	6831      	ldr	r1, [r6, #0]
 80036d8:	061f      	lsls	r7, r3, #24
 80036da:	f851 5b04 	ldr.w	r5, [r1], #4
 80036de:	d402      	bmi.n	80036e6 <_printf_i+0x186>
 80036e0:	065f      	lsls	r7, r3, #25
 80036e2:	bf48      	it	mi
 80036e4:	b2ad      	uxthmi	r5, r5
 80036e6:	6031      	str	r1, [r6, #0]
 80036e8:	07d9      	lsls	r1, r3, #31
 80036ea:	bf44      	itt	mi
 80036ec:	f043 0320 	orrmi.w	r3, r3, #32
 80036f0:	6023      	strmi	r3, [r4, #0]
 80036f2:	b11d      	cbz	r5, 80036fc <_printf_i+0x19c>
 80036f4:	2310      	movs	r3, #16
 80036f6:	e7ad      	b.n	8003654 <_printf_i+0xf4>
 80036f8:	4826      	ldr	r0, [pc, #152]	@ (8003794 <_printf_i+0x234>)
 80036fa:	e7e9      	b.n	80036d0 <_printf_i+0x170>
 80036fc:	6823      	ldr	r3, [r4, #0]
 80036fe:	f023 0320 	bic.w	r3, r3, #32
 8003702:	6023      	str	r3, [r4, #0]
 8003704:	e7f6      	b.n	80036f4 <_printf_i+0x194>
 8003706:	4616      	mov	r6, r2
 8003708:	e7bd      	b.n	8003686 <_printf_i+0x126>
 800370a:	6833      	ldr	r3, [r6, #0]
 800370c:	6825      	ldr	r5, [r4, #0]
 800370e:	6961      	ldr	r1, [r4, #20]
 8003710:	1d18      	adds	r0, r3, #4
 8003712:	6030      	str	r0, [r6, #0]
 8003714:	062e      	lsls	r6, r5, #24
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	d501      	bpl.n	800371e <_printf_i+0x1be>
 800371a:	6019      	str	r1, [r3, #0]
 800371c:	e002      	b.n	8003724 <_printf_i+0x1c4>
 800371e:	0668      	lsls	r0, r5, #25
 8003720:	d5fb      	bpl.n	800371a <_printf_i+0x1ba>
 8003722:	8019      	strh	r1, [r3, #0]
 8003724:	2300      	movs	r3, #0
 8003726:	6123      	str	r3, [r4, #16]
 8003728:	4616      	mov	r6, r2
 800372a:	e7bc      	b.n	80036a6 <_printf_i+0x146>
 800372c:	6833      	ldr	r3, [r6, #0]
 800372e:	1d1a      	adds	r2, r3, #4
 8003730:	6032      	str	r2, [r6, #0]
 8003732:	681e      	ldr	r6, [r3, #0]
 8003734:	6862      	ldr	r2, [r4, #4]
 8003736:	2100      	movs	r1, #0
 8003738:	4630      	mov	r0, r6
 800373a:	f7fc fd71 	bl	8000220 <memchr>
 800373e:	b108      	cbz	r0, 8003744 <_printf_i+0x1e4>
 8003740:	1b80      	subs	r0, r0, r6
 8003742:	6060      	str	r0, [r4, #4]
 8003744:	6863      	ldr	r3, [r4, #4]
 8003746:	6123      	str	r3, [r4, #16]
 8003748:	2300      	movs	r3, #0
 800374a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800374e:	e7aa      	b.n	80036a6 <_printf_i+0x146>
 8003750:	6923      	ldr	r3, [r4, #16]
 8003752:	4632      	mov	r2, r6
 8003754:	4649      	mov	r1, r9
 8003756:	4640      	mov	r0, r8
 8003758:	47d0      	blx	sl
 800375a:	3001      	adds	r0, #1
 800375c:	d0ad      	beq.n	80036ba <_printf_i+0x15a>
 800375e:	6823      	ldr	r3, [r4, #0]
 8003760:	079b      	lsls	r3, r3, #30
 8003762:	d413      	bmi.n	800378c <_printf_i+0x22c>
 8003764:	68e0      	ldr	r0, [r4, #12]
 8003766:	9b03      	ldr	r3, [sp, #12]
 8003768:	4298      	cmp	r0, r3
 800376a:	bfb8      	it	lt
 800376c:	4618      	movlt	r0, r3
 800376e:	e7a6      	b.n	80036be <_printf_i+0x15e>
 8003770:	2301      	movs	r3, #1
 8003772:	4632      	mov	r2, r6
 8003774:	4649      	mov	r1, r9
 8003776:	4640      	mov	r0, r8
 8003778:	47d0      	blx	sl
 800377a:	3001      	adds	r0, #1
 800377c:	d09d      	beq.n	80036ba <_printf_i+0x15a>
 800377e:	3501      	adds	r5, #1
 8003780:	68e3      	ldr	r3, [r4, #12]
 8003782:	9903      	ldr	r1, [sp, #12]
 8003784:	1a5b      	subs	r3, r3, r1
 8003786:	42ab      	cmp	r3, r5
 8003788:	dcf2      	bgt.n	8003770 <_printf_i+0x210>
 800378a:	e7eb      	b.n	8003764 <_printf_i+0x204>
 800378c:	2500      	movs	r5, #0
 800378e:	f104 0619 	add.w	r6, r4, #25
 8003792:	e7f5      	b.n	8003780 <_printf_i+0x220>
 8003794:	080039b1 	.word	0x080039b1
 8003798:	080039c2 	.word	0x080039c2

0800379c <memmove>:
 800379c:	4288      	cmp	r0, r1
 800379e:	b510      	push	{r4, lr}
 80037a0:	eb01 0402 	add.w	r4, r1, r2
 80037a4:	d902      	bls.n	80037ac <memmove+0x10>
 80037a6:	4284      	cmp	r4, r0
 80037a8:	4623      	mov	r3, r4
 80037aa:	d807      	bhi.n	80037bc <memmove+0x20>
 80037ac:	1e43      	subs	r3, r0, #1
 80037ae:	42a1      	cmp	r1, r4
 80037b0:	d008      	beq.n	80037c4 <memmove+0x28>
 80037b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80037ba:	e7f8      	b.n	80037ae <memmove+0x12>
 80037bc:	4402      	add	r2, r0
 80037be:	4601      	mov	r1, r0
 80037c0:	428a      	cmp	r2, r1
 80037c2:	d100      	bne.n	80037c6 <memmove+0x2a>
 80037c4:	bd10      	pop	{r4, pc}
 80037c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80037ce:	e7f7      	b.n	80037c0 <memmove+0x24>

080037d0 <_sbrk_r>:
 80037d0:	b538      	push	{r3, r4, r5, lr}
 80037d2:	4d06      	ldr	r5, [pc, #24]	@ (80037ec <_sbrk_r+0x1c>)
 80037d4:	2300      	movs	r3, #0
 80037d6:	4604      	mov	r4, r0
 80037d8:	4608      	mov	r0, r1
 80037da:	602b      	str	r3, [r5, #0]
 80037dc:	f7fd fb34 	bl	8000e48 <_sbrk>
 80037e0:	1c43      	adds	r3, r0, #1
 80037e2:	d102      	bne.n	80037ea <_sbrk_r+0x1a>
 80037e4:	682b      	ldr	r3, [r5, #0]
 80037e6:	b103      	cbz	r3, 80037ea <_sbrk_r+0x1a>
 80037e8:	6023      	str	r3, [r4, #0]
 80037ea:	bd38      	pop	{r3, r4, r5, pc}
 80037ec:	20000248 	.word	0x20000248

080037f0 <memcpy>:
 80037f0:	440a      	add	r2, r1
 80037f2:	4291      	cmp	r1, r2
 80037f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80037f8:	d100      	bne.n	80037fc <memcpy+0xc>
 80037fa:	4770      	bx	lr
 80037fc:	b510      	push	{r4, lr}
 80037fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003802:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003806:	4291      	cmp	r1, r2
 8003808:	d1f9      	bne.n	80037fe <memcpy+0xe>
 800380a:	bd10      	pop	{r4, pc}

0800380c <_realloc_r>:
 800380c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003810:	4607      	mov	r7, r0
 8003812:	4614      	mov	r4, r2
 8003814:	460d      	mov	r5, r1
 8003816:	b921      	cbnz	r1, 8003822 <_realloc_r+0x16>
 8003818:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800381c:	4611      	mov	r1, r2
 800381e:	f7ff bc4d 	b.w	80030bc <_malloc_r>
 8003822:	b92a      	cbnz	r2, 8003830 <_realloc_r+0x24>
 8003824:	f7ff fbde 	bl	8002fe4 <_free_r>
 8003828:	4625      	mov	r5, r4
 800382a:	4628      	mov	r0, r5
 800382c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003830:	f000 f81a 	bl	8003868 <_malloc_usable_size_r>
 8003834:	4284      	cmp	r4, r0
 8003836:	4606      	mov	r6, r0
 8003838:	d802      	bhi.n	8003840 <_realloc_r+0x34>
 800383a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800383e:	d8f4      	bhi.n	800382a <_realloc_r+0x1e>
 8003840:	4621      	mov	r1, r4
 8003842:	4638      	mov	r0, r7
 8003844:	f7ff fc3a 	bl	80030bc <_malloc_r>
 8003848:	4680      	mov	r8, r0
 800384a:	b908      	cbnz	r0, 8003850 <_realloc_r+0x44>
 800384c:	4645      	mov	r5, r8
 800384e:	e7ec      	b.n	800382a <_realloc_r+0x1e>
 8003850:	42b4      	cmp	r4, r6
 8003852:	4622      	mov	r2, r4
 8003854:	4629      	mov	r1, r5
 8003856:	bf28      	it	cs
 8003858:	4632      	movcs	r2, r6
 800385a:	f7ff ffc9 	bl	80037f0 <memcpy>
 800385e:	4629      	mov	r1, r5
 8003860:	4638      	mov	r0, r7
 8003862:	f7ff fbbf 	bl	8002fe4 <_free_r>
 8003866:	e7f1      	b.n	800384c <_realloc_r+0x40>

08003868 <_malloc_usable_size_r>:
 8003868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800386c:	1f18      	subs	r0, r3, #4
 800386e:	2b00      	cmp	r3, #0
 8003870:	bfbc      	itt	lt
 8003872:	580b      	ldrlt	r3, [r1, r0]
 8003874:	18c0      	addlt	r0, r0, r3
 8003876:	4770      	bx	lr

08003878 <_init>:
 8003878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387a:	bf00      	nop
 800387c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800387e:	bc08      	pop	{r3}
 8003880:	469e      	mov	lr, r3
 8003882:	4770      	bx	lr

08003884 <_fini>:
 8003884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003886:	bf00      	nop
 8003888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800388a:	bc08      	pop	{r3}
 800388c:	469e      	mov	lr, r3
 800388e:	4770      	bx	lr
